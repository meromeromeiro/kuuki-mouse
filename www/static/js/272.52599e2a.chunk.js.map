{"version":3,"file":"static/js/272.52599e2a.chunk.js","mappings":"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","sources":["calc/utils.ts","calc/InputWithUnderline.js","calc/BitExtractor.js","calc/BaseSelector.js","calc/NumberConverter.js"],"sourcesContent":["export function myFormat(str: string) {\n    const l = str.length;\n    let s = \"\"\n    for (let i = 0; i < l; i++) {\n        s = str[l - 1 - i] + s\n        if ((i + 1) < l && (i + 1) % 4 === 0)\n            s = '_' + s\n    }\n    return s\n}\n\nexport function myStrip(str: string) {\n    return str.split(\"_\").join(\"\")\n}\n\nexport function BigIntWithBase(raw: string, base?: number) {\n    switch (base) {\n        case 16:\n            return BigInt(\"0x\" + raw)\n        case 2:\n            return BigInt(\"0b\" + raw)\n        default:\n            return BigInt(raw)\n    }\n\n}","import React, { useState } from 'react';\nimport { myFormat } from './utils.ts';\n\n\n// import { reverseString } from '@/Tools/utils'\nconst InputWithUnderline = ({ value, placeholder }) => {\n    // const [inputValue, setInputValue] = useState('');\n    const [isCopied, setIsCopied] = useState(false); // 新增状态\n\n    // const handleChange = (e) => {\n    //     setInputValue(e.target.value);\n    // };\n\n    // // 24-11-17\n    // const reverseString = (str) => {\n    //     return str.split('').reverse().join(''); // 反转字符串\n    // };\n\n    // const formatInputValue = (value) => {\n    //     // 从右往左每隔 4 个字符插入一个下划线\n    //     const reversed = reverseString(value);\n    //     const formatted = reversed.replace(/(.{4})/g, '$1_'); // 每4个字符后插入下划线\n    //     return reverseString(formatted).replace(/_$/, ''); // 反转并去掉最后一个下划线（如果存在）\n    // };\n\n  \n    const copyToClipboard = () => {\n        const formattedValue = myFormat(value);\n        navigator.clipboard.writeText(formattedValue)\n            .then(() => {\n                // 输入框亮一下\n                setIsCopied(true);\n                setTimeout(() => {\n                    setIsCopied(false);\n                }, 200); // 1秒后恢复原样\n            })\n            .catch(err => {\n                console.error(\"复制失败:\", err);\n            });\n    };\n\n    return (\n        <input\n            type=\"text\"\n            value={myFormat(value)}\n            // onChange={handleChange}\n            onClick={copyToClipboard}\n            placeholder={placeholder}\n            className={`border border-gray-300 p-2 rounded mb-2 w-full ${isCopied ? 'bg-green-200' : ''}`} // 根据状态改变背景色\n        />\n    );\n};\n\nexport default InputWithUnderline;","import React, { useState, useEffect } from 'react';\nimport { BigIntWithBase } from './utils';\nimport InputWithUnderline from './InputWithUnderline'\n\nconst BitExtractor = ({ value }) => {\n\n    const [highBit, setHighBit] = useState(0);\n    const [lowBit, setLowBit] = useState(0);\n    const [bigint, setBigint] = useState(BigIntWithBase(value));\n\n    useEffect(() => {\n        const handleExtractBits = () => {\n            if (highBit < lowBit || highBit < 0 || lowBit < 0) {\n                //   alert(\"高位必须大于等于低位，并且不能为负数\");\n                return;\n            }\n\n            const mask = (BigIntWithBase(1) << BigIntWithBase(highBit + 1)) - BigIntWithBase(1);\n            const extractedBits = (BigIntWithBase(value) & mask) >> BigIntWithBase(lowBit);\n\n            setBigint(extractedBits);\n        };\n        handleExtractBits()\n    }, [highBit, lowBit, value])\n\n    return (\n        <div className=\"flex gap-4 w-full\">\n            {/* 前两个窄输入框，每个只有3个字符宽 */}\n            <input\n                type=\"text\"\n                className=\"w-12 px-2 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                onChange={e => setHighBit(Number(e.target.value))}\n                value={highBit}\n                maxLength=\"3\"\n            />\n            <input\n                type=\"text\"\n                className=\"w-12 px-2 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                onChange={e => setLowBit(Number(e.target.value))}\n                value={lowBit}\n                maxLength=\"3\"\n            />\n\n            <div className=\"flex gap-4 w-full\">\n\n                {/* 中间两个常规输入框 */}\n                <div className=\"w-1/4\">\n                    <InputWithUnderline value={bigint.toString(16).padStart(Math.ceil((highBit - lowBit + 1) / 4), '0')} placeholder=\"hex\" />\n                </div>\n                <div className=\"w-1/4\">\n                    <InputWithUnderline value={bigint.toString(10)} placeholder=\"dec\" />\n                </div>\n\n\n                {/* 最后一个占据屏幕一半的输入框 */}\n                <div className=\"w-1/2\">\n                    <InputWithUnderline value={bigint.toString(2).padStart(Math.ceil((highBit - lowBit + 1)), '0')} placeholder=\"bin\" />\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default BitExtractor;","import React from 'react';\n\nconst BaseSelector = ({ base, handleBase }) => {\n  return (\n    <div className=\"flex space-x-2\">\n      <button \n        onClick={() => handleBase(16)} \n        className={`border border-gray-300 p-2 rounded ${base === 16 ? 'bg-blue-500 text-white' : ''}`}>\n        Hex\n      </button>\n      <button \n        onClick={() => handleBase(10)} \n        className={`border border-gray-300 p-2 rounded ${base === 10 ? 'bg-blue-500 text-white' : ''}`}>\n        Dec\n      </button>\n      <button \n        onClick={() => handleBase(2)} \n        className={`border border-gray-300 p-2 rounded ${base === 2 ? 'bg-blue-500 text-white' : ''}`}>\n        Bin\n      </button>\n    </div>\n  );\n};\n\nexport default BaseSelector;","/* eslint-disable no-undef */\nimport { useState } from 'react';\nimport InputWithUnderline from './InputWithUnderline';\nimport BitExtractor from './BitExtractor.js'\nimport BaseSelector from './BaseSelector.js';\nimport { BigIntWithBase, myFormat, myStrip } from './utils.ts';\n// import BigInt;\n\nconst NumberConverter = () => {\n  const [value, setValue] = useState(\"\")\n  const [hexValue, setHexValue] = useState(\"\")\n  const [decValue, setDecValue] = useState(\"\")\n  const [binValue, setBinValue] = useState(\"\")\n  const [base, setBase] = useState(10); // 存储当前选择的进制\n  const [count, setCount] = useState(3);\n\n\n  const handleChange = (e) => {\n    try {\n      const raw = myStrip(e.target.value);\n      const bn = BigIntWithBase(raw, base);\n\n      setValue(e.target.value);\n\n      setHexValue((bn.toString(16)));\n      setBinValue((bn.toString(2)));\n      setDecValue((bn.toString(10)));\n    } catch (error) {\n      // console.log(\"输入无效:\", error); // 打印错误信息\n    }\n  }\n\n  const handleBase = (b) => {\n    setBase(b)\n    const raw = myStrip(value);\n    const bn = BigIntWithBase(raw, base);\n    setValue(myFormat(bn.toString(b)));\n  };\n\n\n  // 增加计数器数量\n  const addCounter = () => {\n    setCount(prev => prev + 1);\n  };\n\n  // 减少计数器数量\n  const removeCounter = () => {\n    if (count > 1) {\n      setCount(prev => prev - 1);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <input\n        type=\"text\"\n        value={value} // 将输入框的值绑定到状态\n        onChange={handleChange} // 更新状态\n        className={`border border-gray-300 p-2 rounded mb-2 w-full`} // 根据状态改变背景色\n      />\n      <div className=\"flex justify-between w-full mb-2\">\n        <BaseSelector base={base} handleBase={handleBase} ></BaseSelector>\n        <BaseSelector base={base} handleBase={handleBase} ></BaseSelector>\n        <BaseSelector base={base} handleBase={handleBase} ></BaseSelector>\n        <BaseSelector base={base} handleBase={handleBase} ></BaseSelector>\n        <BaseSelector base={base} handleBase={handleBase} ></BaseSelector>\n      </div>\n      <InputWithUnderline value={hexValue} placeholder=\"hex\" />\n      <InputWithUnderline value={decValue} placeholder=\"dec\" />\n      <InputWithUnderline value={binValue} placeholder=\"bin\" />\n\n      <div className=\"flex gap-4 items-center\">\n        <button\n          onClick={removeCounter}\n          className=\"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600 focus:outline-none disabled:opacity-50\"\n          disabled={count <= 1}\n        >\n          减少\n        </button>\n        <span className=\"font-medium\">当前计数器数量: {count}</span>\n        <button\n          onClick={addCounter}\n          className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none\"\n        >\n          增加\n        </button>\n      </div>\n\n        {Array.from({ length: count }).map(() => (\n          <BitExtractor value={decValue}></BitExtractor>\n        ))}\n    </div>\n  );\n};\n\nexport default NumberConverter;"],"names":["myFormat","str","l","length","s","i","myStrip","split","join","BigIntWithBase","raw","base","BigInt","_ref","value","placeholder","isCopied","setIsCopied","useState","_jsx","type","onClick","copyToClipboard","formattedValue","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","className","highBit","setHighBit","lowBit","setLowBit","bigint","setBigint","useEffect","handleExtractBits","mask","extractedBits","_jsxs","children","onChange","e","Number","target","maxLength","InputWithUnderline","toString","padStart","Math","ceil","handleBase","NumberConverter","setValue","hexValue","setHexValue","decValue","setDecValue","binValue","setBinValue","setBase","count","setCount","b","bn","BaseSelector","removeCounter","prev","disabled","addCounter","Array","from","map","BitExtractor"],"sourceRoot":""}