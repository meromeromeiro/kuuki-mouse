{"version":3,"file":"static/js/632.27071897.chunk.js","mappings":"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","sources":["three/boxes/App.tsx"],"sourcesContent":["// src/App.tsx\nimport React, { useRef, useEffect, useState, useCallback, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { PlaneData, NewPlaneConfig, ClickedCoords } from './types'; // Import updated types\n\n// Make sure Tailwind is imported in your main index.css or equivalent\n// import './index.css'; // Assuming your global styles import tailwind here\n\nconst App: React.FC = () => {\n    const mountRef = useRef<HTMLDivElement>(null); // Ref for the canvas container\n    const sceneRef = useRef<THREE.Scene | null>(null);\n    const cameraRef = useRef<THREE.OrthographicCamera | null>(null);\n    const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n    const planesGroupRef = useRef<THREE.Group | null>(null); // Group to hold all permanent plane meshes\n\n    // Refs for the preview plane mesh and its material\n    const previewMeshRef = useRef<THREE.Mesh | null>(null);\n    const previewMaterialRef = useRef<THREE.Material | null>(null);\n\n    // State for the list of planes currently rendered (permanent planes)\n    const [planes, setPlanes] = useState<PlaneData[]>([]);\n\n    // State for the configuration of the next plane to be added\n    const [newPlaneConfig, setNewPlaneConfig] = useState<NewPlaneConfig>({\n        width: 1,\n        height: 1,\n        color: '#ff0000', // Default red\n        opacity: 0.5, // Default semi-transparent\n    });\n\n    // State for the last clicked coordinates on the canvas (in world space)\n    const [clickedCoords, setClickedCoords] = useState<ClickedCoords | null>(null);\n\n    // State for the control panel's expanded/collapsed state\n    const [isPanelExpanded, setIsPanelExpanded] = useState(true);\n\n    // Helper to convert hex color and opacity to rgba CSS string\n    const getRgbaColor = useCallback((hex: string, opacity: number) => {\n        const r = parseInt(hex.slice(1, 3), 16);\n        const g = parseInt(hex.slice(3, 5), 16);\n        const b = parseInt(hex.slice(5, 7), 16);\n        return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }, []);\n\n    // Memoize the RGBA color string for the preview material and CSS display\n    const previewRgbaColor = useMemo(() => getRgbaColor(newPlaneConfig.color, newPlaneConfig.opacity), [newPlaneConfig.color, newPlaneConfig.opacity, getRgbaColor]);\n\n\n    // --- Three.js Setup Effect ---\n    useEffect(() => {\n        if (!mountRef.current) return;\n\n        const currentMount = mountRef.current;\n        const width = currentMount.clientWidth;\n        const height = currentMount.clientHeight;\n\n        // Scene\n        sceneRef.current = new THREE.Scene();\n        sceneRef.current.background = new THREE.Color(0xeeeeee); // Light gray background\n\n        // Orthographic Camera\n        const aspect = width / height;\n        const frustumSize = 10; // Controls the visible area scale\n        cameraRef.current = new THREE.OrthographicCamera(\n            frustumSize * aspect / -2, // left\n            frustumSize * aspect / 2,  // right\n            frustumSize / 2,           // top\n            frustumSize / -2,          // bottom\n            1,                         // near\n            1000                       // far\n        );\n        cameraRef.current.position.set(0, 0, 10); // Positioned to look at Z=0 plane\n        cameraRef.current.lookAt(0, 0, 0); // Look at the origin\n\n        // Renderer\n        rendererRef.current = new THREE.WebGLRenderer({ antialias: true });\n        rendererRef.current.setSize(width, height);\n        rendererRef.current.setPixelRatio(window.devicePixelRatio);\n        currentMount.appendChild(rendererRef.current.domElement);\n\n        // Group for permanent planes\n        planesGroupRef.current = new THREE.Group();\n        planesGroupRef.current.name = \"PermanentPlanesGroup\";\n        sceneRef.current.add(planesGroupRef.current);\n\n        // Animation Loop (minimal, just for rendering)\n        const animate = () => {\n            // No need for requestAnimationFrame if nothing is animating\n            // Only render when needed (e.g., after pose update or resize)\n            window.requestAnimationFrame(animate);\n            if (rendererRef.current && sceneRef.current && cameraRef.current) {\n                rendererRef.current.render(sceneRef.current, cameraRef.current);\n            }\n        };\n        // Initial render\n        animate();\n\n\n        // Handle Resize\n        const handleResize = () => {\n            if (cameraRef.current && rendererRef.current && currentMount) {\n                const newWidth = currentMount.clientWidth;\n                const newHeight = currentMount.clientHeight;\n                const newAspect = newWidth / newHeight;\n\n                const currentFrustumSize = cameraRef.current.top * 2;\n                cameraRef.current.left = currentFrustumSize * newAspect / -2;\n                cameraRef.current.right = currentFrustumSize * newAspect / 2;\n                cameraRef.current.top = currentFrustumSize / 2;\n                cameraRef.current.bottom = currentFrustumSize / -2;\n\n                cameraRef.current.updateProjectionMatrix();\n                rendererRef.current.setSize(newWidth, newHeight);\n                rendererRef.current.render(sceneRef.current!, cameraRef.current); // Re-render after resize\n            }\n        };\n        window.addEventListener('resize', handleResize);\n\n        // --- Canvas Click Handling ---\n        const handleCanvasClick = (event: MouseEvent) => {\n            if (!cameraRef.current || !currentMount) return;\n\n            const rect = currentMount.getBoundingClientRect();\n            const mouseX = event.clientX - rect.left;\n            const mouseY = event.clientY - rect.top;\n\n            // 平面直角坐标系\n            // Convert screen coordinates to normalized device coordinates (NDC)\n            const ndcX = (mouseX / rect.width) * 2 - 1;\n            const ndcY = -(mouseY / rect.height) * 2 + 1;\n\n            // Use a vector representing the click point in screen space, at the Z=0 plane depth\n            const vector = new THREE.Vector3(ndcX, ndcY, 0); // Z=0 because Orthographic camera looks at Z=0\n\n            // 前一个是[-1,1]的比例,后一个是camera范围里的大小\n            // Unproject the vector from NDC to world space\n            vector.unproject(cameraRef.current);\n\n            // For an orthographic camera looking at Z=0, the unprojected vector's x and y\n            // directly give the world coordinates on the Z=0 plane.\n            setClickedCoords({ x: vector.x, y: vector.y });\n            console.log(`Clicked World Coords: X=${vector.x.toFixed(2)}, Y=${vector.y.toFixed(2)}`);\n\n            // Note: The preview mesh is handled by a separate effect triggered by setClickedCoords\n        };\n        currentMount.addEventListener('click', handleCanvasClick);\n\n\n        // Cleanup function\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            currentMount.removeEventListener('click', handleCanvasClick);\n\n            // Dispose Three.js objects associated with the scene\n            sceneRef.current?.traverse(object => {\n                if (object instanceof THREE.Mesh) {\n                    object.geometry?.dispose();\n                    if (Array.isArray(object.material)) {\n                        object.material.forEach(material => material.dispose());\n                    } else {\n                        object.material?.dispose();\n                    }\n                }\n            });\n\n            // Dispose preview mesh and material if they exist (though the effect below also cleans up)\n            if (previewMeshRef.current) {\n                previewMeshRef.current.geometry?.dispose();\n                if (Array.isArray(previewMeshRef.current.material)) {\n                    previewMeshRef.current.material.forEach(material => material.dispose());\n                } else {\n                    previewMeshRef.current.material?.dispose();\n                }\n                planesGroupRef.current?.remove(previewMeshRef.current); // Remove from group if it's there\n            }\n            previewMaterialRef.current?.dispose(); // Ensure material is disposed\n\n            rendererRef.current?.dispose();\n\n            if (currentMount && rendererRef.current?.domElement) {\n                currentMount.removeChild(rendererRef.current.domElement);\n            }\n\n            // Clear refs\n            sceneRef.current = null;\n            cameraRef.current = null;\n            rendererRef.current = null;\n            planesGroupRef.current = null;\n            previewMeshRef.current = null;\n            previewMaterialRef.current = null;\n        };\n    }, []); // Empty dependency array: runs once on mount and cleans up on unmount\n\n    // --- Effect to Manage Preview Plane ---\n    useEffect(() => {\n        if (!planesGroupRef.current || !sceneRef.current || !cameraRef.current || !rendererRef.current) return;\n\n        // Cleanup existing preview mesh if any\n        if (previewMeshRef.current) {\n            previewMeshRef.current.geometry?.dispose();\n            if (Array.isArray(previewMeshRef.current.material)) {\n                previewMeshRef.current.material.forEach(material => material.dispose());\n            } else {\n                previewMeshRef.current.material?.dispose();\n            }\n\n            // Dispose and clear material ref specifically\n            previewMaterialRef.current?.dispose();\n            previewMaterialRef.current = null;\n\n\n            planesGroupRef.current.remove(previewMeshRef.current); // Remove from group\n            previewMeshRef.current = null; // Clear mesh ref\n        }\n\n        // Create and add new preview mesh if clickedCoords is not null\n        if (clickedCoords) {\n            const geometry = new THREE.PlaneGeometry(newPlaneConfig.width, newPlaneConfig.height);\n            const material = new THREE.MeshBasicMaterial({\n                color: newPlaneConfig.color,\n                transparent: true, // Enable transparency\n                opacity: newPlaneConfig.opacity, // Set opacity\n                side: THREE.DoubleSide // Render both sides\n            });\n\n            const mesh = new THREE.Mesh(geometry, material);\n            mesh.position.set(clickedCoords.x, clickedCoords.y, 0.01); // Slightly above Z=0 for visibility\n\n            planesGroupRef.current.add(mesh);\n            previewMeshRef.current = mesh; // Store ref to the new preview mesh\n            previewMaterialRef.current = material; // Store ref to the new preview material\n\n            // Re-render the scene\n            rendererRef.current.render(sceneRef.current, cameraRef.current);\n        } else {\n            // If clickedCoords became null, just ensure we render after cleanup\n            rendererRef.current.render(sceneRef.current, cameraRef.current);\n        }\n\n\n    }, [clickedCoords, newPlaneConfig, rendererRef, sceneRef, cameraRef, planesGroupRef]); // Rerun when clickedCoords or newPlaneConfig changes\n\n\n    // --- Effect to Render Permanent Planes List ---\n    useEffect(() => {\n        if (!planesGroupRef.current || !sceneRef.current || !cameraRef.current || !rendererRef.current) return;\n\n        // Clear existing permanent planes from the group and dispose their resources\n        // Only dispose meshes whose material is not the current preview material\n        planesGroupRef.current.children.filter(child => child !== previewMeshRef.current).forEach(child => {\n            if (child instanceof THREE.Mesh) {\n                child.geometry?.dispose();\n                if (Array.isArray(child.material)) {\n                    child.material.forEach(material => material.dispose());\n                } else {\n                    child.material?.dispose();\n                }\n            }\n            planesGroupRef.current!.remove(child);\n        });\n\n\n        // Add new permanent planes based on the 'planes' state\n        planes.forEach(planeData => {\n            const geometry = new THREE.PlaneGeometry(planeData.width, planeData.height);\n            const material = new THREE.MeshBasicMaterial({\n                color: planeData.color,\n                transparent: true, // Needs to be transparent\n                opacity: planeData.opacity, // Use plane's opacity\n                side: THREE.DoubleSide\n            });\n            const mesh = new THREE.Mesh(geometry, material);\n\n            mesh.position.set(planeData.x, planeData.y, 0); // Render on the Z=0 plane\n\n            planesGroupRef.current!.add(mesh);\n        });\n\n        // Re-render the scene after updating permanent planes\n        rendererRef.current.render(sceneRef.current, cameraRef.current);\n\n    }, [planes, rendererRef, sceneRef, cameraRef, planesGroupRef, previewMeshRef]); // Rerun this effect whenever the 'planes' state changes\n\n    // --- Control Panel Handlers ---\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { name, value, type } = e.target;\n        setNewPlaneConfig(prev => ({\n            ...prev,\n            [name]: type === 'number' ? parseFloat(value) : value,\n        }));\n    };\n\n    const handleAddPlane = () => {\n        if (!clickedCoords) {\n            alert(\"Please click on the canvas to select a position first.\");\n            return;\n        }\n        const newPlane: PlaneData = {\n            id: Date.now().toString(), // Simple unique ID\n            ...newPlaneConfig,\n            x: clickedCoords.x,\n            y: clickedCoords.y,\n        };\n        setPlanes(prev => [...prev, newPlane]);\n        // Clearing clickedCoords will trigger the effect to remove the preview mesh\n        setClickedCoords(null);\n    };\n\n    const handleClearPlanes = () => {\n        setPlanes([]);\n        // Clearing clickedCoords will trigger the effect to remove the preview mesh\n        setClickedCoords(null);\n    };\n\n    return (\n        <div className=\"flex h-screen w-screen overflow-hidden relative\">\n            {/* Canvas Container */}\n            <div ref={mountRef} className=\"flex-grow h-full border-r border-gray-300\">\n                {/* Three.js will render here */}\n            </div>\n\n            {/* Control Panel */}\n            <div className={`\n                fixed top-4 right-4 p-6 bg-gray-800 bg-opacity-70 text-white rounded-lg shadow-lg\n                transition-all ease-in-out duration-300\n                ${isPanelExpanded ? 'w-80' : 'w-16 overflow-hidden'}\n            `}>\n                {/* Toggle Button */}\n                <button\n                    onClick={() => setIsPanelExpanded(!isPanelExpanded)}\n                    className=\"absolute top-2 right-2 bg-gray-700 text-white p-1 rounded-full hover:bg-gray-600 transition z-10\" // z-10 to ensure it's clickable\n                    aria-label={isPanelExpanded ? \"Collapse Panel\" : \"Expand Panel\"}\n                >\n                    {isPanelExpanded ? (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\n                        </svg>\n                    ) : (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                            <path fillRule=\"evenodd\" d=\"M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                        </svg>\n                    )}\n                </button>\n\n                {/* Panel Content - Only visible when expanded */}\n                {isPanelExpanded && (\n                    <div className=\"mt-4 space-y-4\">\n                        <div>\n                            <label htmlFor=\"width\" className=\"block text-sm font-medium\">Width:</label>\n                            <input\n                                type=\"number\"\n                                id=\"width\"\n                                name=\"width\"\n                                value={newPlaneConfig.width}\n                                onChange={handleInputChange}\n                                step=\"0.1\"\n                                min=\"0.1\"\n                                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm text-gray-900 p-1\"\n                            />\n                        </div>\n                        <div>\n                            <label htmlFor=\"height\" className=\"block text-sm font-medium\">Height:</label>\n                            <input\n                                type=\"number\"\n                                id=\"height\"\n                                name=\"height\"\n                                value={newPlaneConfig.height}\n                                onChange={handleInputChange}\n                                step=\"0.1\"\n                                min=\"0.1\"\n                                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm text-gray-900 p-1\"\n                            />\n                        </div>\n                        <div>\n                            <label htmlFor=\"color\" className=\"block text-sm font-medium\">Color:</label>\n                            <input\n                                type=\"color\"\n                                id=\"color\"\n                                name=\"color\"\n                                value={newPlaneConfig.color}\n                                onChange={handleInputChange}\n                                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm p-1 h-10\" // Increased height for color swatch\n                            />\n                        </div>\n                        <div>\n                            <label htmlFor=\"opacity\" className=\"block text-sm font-medium\">Opacity ({newPlaneConfig.opacity}):</label>\n                            <input\n                                type=\"range\" // Range slider for opacity\n                                id=\"opacity\"\n                                name=\"opacity\"\n                                value={newPlaneConfig.opacity}\n                                onChange={handleInputChange}\n                                step=\"0.01\"\n                                min=\"0\"\n                                max=\"1\"\n                                className=\"mt-1 block w-full\"\n                            />\n                        </div>\n\n                        {/* Display clicked coordinates */}\n                        <div className=\"text-sm\">\n                            Clicked Pos: {clickedCoords ? `X: ${clickedCoords.x.toFixed(2)}, Y: ${clickedCoords.y.toFixed(2)}` : 'Click on canvas'}\n                        </div>\n\n                        {/* Preview Color Swatch */}\n                        <div className=\"w-full h-8 rounded-md border border-gray-600\" style={{ backgroundColor: previewRgbaColor }}>\n                            {/* Visual representation of the configured color and opacity */}\n                        </div>\n\n\n                        {/* Action Buttons */}\n                        <button\n                            onClick={handleAddPlane}\n                            disabled={!clickedCoords}\n                            className={`\n                                w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white\n                                ${clickedCoords ? 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500' : 'bg-gray-400 cursor-not-allowed'}\n                            `}\n                        >\n                            Add Plane\n                        </button>\n\n                        <button\n                            onClick={handleClearPlanes}\n                            className=\"w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\n                        >\n                            Clear All\n                        </button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default App;"],"names":["App","mountRef","useRef","sceneRef","cameraRef","rendererRef","planesGroupRef","previewMeshRef","previewMaterialRef","planes","setPlanes","useState","newPlaneConfig","setNewPlaneConfig","width","height","color","opacity","clickedCoords","setClickedCoords","isPanelExpanded","setIsPanelExpanded","getRgbaColor","useCallback","hex","parseInt","slice","previewRgbaColor","useMemo","useEffect","current","currentMount","clientWidth","clientHeight","THREE","background","aspect","frustumSize","position","set","lookAt","antialias","setSize","setPixelRatio","window","devicePixelRatio","appendChild","domElement","name","add","animate","requestAnimationFrame","render","handleResize","newWidth","newHeight","newAspect","currentFrustumSize","top","left","right","bottom","updateProjectionMatrix","addEventListener","handleCanvasClick","event","rect","getBoundingClientRect","mouseX","clientX","mouseY","clientY","ndcX","ndcY","vector","unproject","x","y","console","log","toFixed","_sceneRef$current","_previewMaterialRef$c","_rendererRef$current","_rendererRef$current2","removeEventListener","traverse","object","_object$geometry","_object$material","geometry","dispose","Array","isArray","material","forEach","_previewMeshRef$curre","_planesGroupRef$curre","_previewMeshRef$curre2","remove","removeChild","_previewMeshRef$curre3","_previewMaterialRef$c2","_previewMeshRef$curre4","transparent","side","mesh","children","filter","child","_child$geometry","_child$material","planeData","handleInputChange","e","value","type","target","prev","parseFloat","_jsxs","className","_jsx","ref","onClick","xmlns","viewBox","fill","fillRule","d","clipRule","htmlFor","id","onChange","step","min","max","style","backgroundColor","handleAddPlane","alert","newPlane","Date","now","toString","disabled","handleClearPlanes"],"sourceRoot":""}