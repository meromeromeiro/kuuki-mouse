{"version":3,"file":"static/js/541.07c7d640.chunk.js","mappings":"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","sources":["Tools/canvas/canvasmanager.ts","avd/ScriptManager.ts","avd/AVDManager.ts","avd/CanvasComponent.js"],"sourcesContent":["class CanvasManager {\n    protected canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private width: number;\n    private height: number;\n    protected baseWidth: number;  // 操作数基准宽度\n    protected baseHeight: number; // 操作数基准高度\n\n    constructor(canvas: HTMLCanvasElement, baseWidth: number, baseHeight: number) {\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.baseWidth = baseWidth;\n        this.baseHeight = baseHeight;\n        this.width = canvas.width;\n        this.height = canvas.height;\n\n        this.context.scale(this.baseWidth / this.width, this.baseHeight / this.height);\n    }\n\n    getContext() {\n        return this.context;\n    }\n\n    // 设置 canvas 尺寸\n    setSize(width: number, height: number): void {\n        this.width = width;\n        this.height = height;\n        this.canvas.width = width;\n        this.canvas.height = height;\n\n        this.context.scale(this.width / this.baseWidth, this.height / this.baseHeight);\n    }\n\n    // 坐标系变换函数\n    transformCoordinates(x: number, y: number): [number, number] {\n        const scaleX = this.width / this.baseWidth;\n        const scaleY = this.height / this.baseHeight;\n        return [x / scaleX, y / scaleY];\n        // return [x, y]\n    }\n\n    // 绘制矩形\n    drawRect(x: number, y: number, width: number, height: number, color: string = 'lightblue'): void {\n        this.context.fillStyle = color;\n        this.context.fillRect(x, y, width, height);\n    }\n\n    drawPoint(x: number, y: number, color: string = \"red\") {\n        // 在点击位置绘制一个圆圈\n        this.context.beginPath();\n        this.context.arc(x, y, 5, 0, Math.PI * 2);\n        this.context.fillStyle =color;\n        this.context.fill();\n        this.context.closePath();\n\n    }\n\n    // 清空画布\n    clear(): void {\n        this.context.clearRect(0, 0, this.width, this.height);\n    }\n\n    // 示例：绘制背景\n    drawBackground(color: string = 'lightblue'): void {\n        this.clear();\n        this.drawRect(0, 0, this.baseWidth, this.baseHeight, color); // 使用基准大小绘制背景\n    }\n\n    setAlpha(alpha: number = 1): void {\n        this.context.globalAlpha = alpha\n    }\n    // x, y 是画布上的位置\n    drawImage(img: HTMLImageElement, x: number, y: number,): void;\n    // x, y 是画布上的位置, width, height 是画布上的 size\n    drawImage(img: HTMLImageElement, x: number, y: number, width: number, height: number,): void;\n\n    drawImage(img: HTMLImageElement, x: number, y: number, width?: number, height?: number): void {\n        if (width && height) {\n            this.context.drawImage(img, x, y, width, height);\n        } else {\n            this.context.drawImage(img, x, y);\n        }\n    }\n\n    // 前四个参数是图片的 位置, 大小\n    // 后四个是在画布上的 位置, 大小\n    drawImageSlice(img: HTMLImageElement, sx: number, sy: number, sWidth: number, sHeight: number, x: number, y: number, width: number, height: number): void {\n        this.context.drawImage(img, sx, sy, sWidth, sHeight, x, y, width, height);\n    }\n\n    // 返回句点的位置，最后一个字符的右下角。\n    drawText(text: string, x: number, y: number, maxWidth: number, fillStyle?: string): [number, number] {\n        this.context.fillStyle = fillStyle ?? this.context.fillStyle;\n\n\n        // console.log(text)\n\n        const match = this.context.font.match(/(\\d+)px/)!; // 使用正则表达式匹配数字和“px”\n        const heightInPx = parseInt(match[1], 10); // 提取数字并转换为整数\n        // console.log(heightInPx)\n        y = y + heightInPx;\n\n        let i = 0;\n        while (this.context.measureText(text.substring(0, i)).width < maxWidth) {\n            i++;\n            if (i > text.length) break;\n        }\n        i--;\n\n        this.context.strokeText(text.substring(0, i), x, y, maxWidth);\n        this.context.fillText(text.substring(0, i), x, y, maxWidth);\n\n        if (text.substring(i).length === 0) return [x + this.context.measureText(text.substring(0, i)).width, y];\n\n        // 下一行和之后的行\n        return this.drawText(text.substring(i), x, y, maxWidth);\n    }\n\n}\n\nexport default CanvasManager;","class ScriptManager {\n    private dialogueData: {\n        name: string;\n        text: string;\n        characters?: { name: string; positionX: number; positionY: number }[];\n    }[] = [];\n    private currentIndex: number = 0; // 当前对话索引\n    private characterStates: { name: string; positionX: number; positionY: number }[] = []; // 当前立绘状态\n\n    constructor(dialogueData: {\n        name: string;\n        text: string;\n        characters?: { name: string; positionX: number; positionY: number }[];\n    }[]) {\n        this.dialogueData = dialogueData;\n    }\n\n    // 获取当前对话和角色状态\n    getCurrentScript() {\n        if (this.currentIndex >= this.dialogueData.length) return null;\n\n        const currentDialogue = this.dialogueData[this.currentIndex];\n        if (currentDialogue.characters) {\n            // 更新立绘状态（完全替换当前立绘）\n            this.characterStates = currentDialogue.characters;\n        }\n\n        return {\n            index: this.currentIndex,\n            ...currentDialogue,\n            characterStates: this.characterStates, // 当前立绘状态\n        };\n    }\n\n    // 获取下一条对话\n    getNextScript() {\n        const script = this.getCurrentScript();\n        this.currentIndex++;\n        return script;\n    }\n\n    // 重置对话和立绘状态\n    reset() {\n        this.currentIndex = 0;\n        this.characterStates = [];\n    }\n}\n\nexport default ScriptManager;","import CanvasManager from \"../Tools/canvas/canvasmanager\";\nimport ScriptManager from \"./ScriptManager\";\n\nclass AVDManager extends CanvasManager {\n    private images?: Record<string, HTMLImageElement>;\n    private scriptManager?: ScriptManager;\n\n    // 渲染相关数据\n    private renderState = {\n        background: \"background\",\n        dialogueBox: \"dialogueBox\",\n        characters: [] as { name: string; positionX: number; positionY: number }[],\n        dialogueText: \"\",\n        characterName: \"\",\n    };\n\n    private clickCount: number = 0;\n    private isTyping: boolean = false;\n    private currentText: string = \"\";\n    private typingIndex: number = 0;\n    private typingTimeout?: number;\n    private lastRenderTime: number = 0;\n\n    private typingInterval: number = 50; // 打字速度（毫秒）\n\n    constructor(canvas: HTMLCanvasElement, baseWidth: number, baseHeight: number) {\n        super(canvas, baseWidth, baseHeight);\n        this.startRenderLoop(); // 开始渲染循环\n    }\n\n    // 初始化图片资源\n    async initImages(images: Record<string, string>) {\n        const promises: Promise<void>[] = [];\n        this.images = {};\n\n        for (const key in images) {\n            const promise = new Promise<void>((resolve, reject) => {\n                const img = new Image();\n                img.src = images[key];\n                img.onload = () => {\n                    this.images![key] = img;\n                    resolve();\n                };\n                img.onerror = () => reject(new Error(`Failed to load image: ${key}`));\n            });\n            promises.push(promise);\n        }\n\n        await Promise.all(promises);\n    }\n\n    // 初始化脚本管理器\n    initScriptManager(dialogueData: {\n        name: string;\n        text: string;\n        characters?: { name: string; positionX: number; positionY: number }[];\n    }[]) {\n        this.scriptManager = new ScriptManager(dialogueData);\n    }\n\n    // 点击事件绑定\n    async initInput() {\n        this.canvas.addEventListener(\"click\", () => {\n            this.handleClick();\n        });\n    }\n\n    // 点击事件处理逻辑\n    handleClick() {\n        if (this.isTyping) {\n            this.finishTyping();\n            return;\n        }\n\n        if (this.clickCount === 0) {\n            this.renderState.background = \"background\";\n        } else {\n            const script = this.scriptManager?.getNextScript();\n            if (script) {\n                this.startTyping(script.name, script.text);\n                this.renderState.characters = script.characterStates || [];\n            } else {\n                this.resetState();\n                return;\n            }\n        }\n\n        this.clickCount++;\n    }\n\n    // 重置状态\n    resetState() {\n        this.clickCount = 0;\n        this.renderState = {\n            background: \"background\",\n            dialogueBox: \"dialogueBox\",\n            characters: [],\n            dialogueText: \"\",\n            characterName: \"\",\n        };\n        this.scriptManager?.reset();\n    }\n\n    // 开始打字效果\n    startTyping(name: string, text: string) {\n        this.isTyping = true;\n        this.renderState.characterName = name;\n        this.currentText = text;\n        this.typingIndex = 0;\n        this.typeNextCharacter();\n    }\n\n    // 完成当前的打字效果\n    finishTyping() {\n        this.isTyping = false;\n        this.renderState.dialogueText = this.currentText;\n\n        if (this.typingTimeout) {\n            clearTimeout(this.typingTimeout);\n        }\n    }\n\n    // 逐字绘制文字\n    typeNextCharacter() {\n        if (this.typingIndex < this.currentText.length) {\n            this.renderState.dialogueText = this.currentText.slice(0, this.typingIndex + 1);\n            this.typingIndex++;\n            this.typingTimeout = window.setTimeout(() => this.typeNextCharacter(), this.typingInterval);\n        } else {\n            this.isTyping = false;\n        }\n    }\n\n    // 主渲染方法\n    private render() {\n        this.clear();\n        const { background, dialogueBox, characters, dialogueText, characterName } = this.renderState;\n\n        // 绘制背景\n        if (this.images && this.images[background]) {\n            this.drawImage(this.images[background], 0, 0, this.baseWidth, this.baseHeight);\n        }\n\n        // 绘制角色\n        characters.forEach(({ name, positionX, positionY }) => {\n            if (this.images && this.images[name]) {\n                this.drawImage(this.images[name], positionX, positionY);\n            }\n        });\n\n        // 绘制对话框\n        if (this.images && this.images[dialogueBox]) {\n            const dialogueBoxHeight = this.baseHeight * 0.25;\n            this.drawImage(\n                this.images[dialogueBox],\n                50,\n                this.baseHeight - dialogueBoxHeight - 20,\n                this.baseWidth - 100,\n                dialogueBoxHeight\n            );\n        }\n\n        // 绘制角色名字\n        if (characterName) {\n            const nameX = 70;\n            const nameY = this.baseHeight - 150;\n            this.drawText(characterName, nameX, nameY, 200, \"white\");\n        }\n\n        // 绘制对话文本\n        if (dialogueText) {\n            const textX = 70;\n            const textY = this.baseHeight - 100;\n            const maxWidth = this.baseWidth - 140;\n            this.drawText(dialogueText, textX, textY, maxWidth, \"white\");\n        }\n    }\n\n    // 启动渲染循环\n    private startRenderLoop() {\n        const loop = (time: number) => {\n            if (time - this.lastRenderTime >= 1000 / 60) {\n                this.render();\n                this.lastRenderTime = time;\n            }\n            requestAnimationFrame(loop);\n        };\n        requestAnimationFrame(loop);\n    }\n}\n\nexport default AVDManager;\n","import React, { useEffect, useRef } from 'react';\nimport CanvasManager from '../Tools/canvas/canvasmanager.ts';\nimport AVDManager from './AVDManager.ts';\n\nconst CanvasComponent = () => {\n    const canvasRef = useRef(null);\n    const containerRef = useRef(null); // 用于获得界面大小\n    const canvasManagerRef = useRef(null);\n\n    useEffect(() => {\n        const container = containerRef.current;\n\n        // 获取父元素的宽度\n        const containerWidth = container.offsetWidth;\n        const aspectRatio = 16 / 8; // 16:10 比例\n        const canvasWidth = containerWidth;\n        const canvasHeight = canvasWidth / aspectRatio;\n\n        // 初始化 CanvasManager\n        const canvasManager = new AVDManager(canvasRef.current, 1000, 500);\n        canvasManager.setSize(canvasWidth, canvasHeight);\n        canvasManager.drawBackground(); // 绘制背景\n\n        // 将 CanvasManager 保存到 ref\n        canvasManagerRef.current = canvasManager;\n\n        // 滚动到 container 元素的位置\n        containerRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n\n        function test() {\n            const m = canvasManager;\n            const src = \"https://proxy.moonchan.xyz/bfs/archive/942752679f58223257855b4d8ed0299ee5c71904.jpg?proxy_host=i0.hdslb.com\";\n            // m.loadImage(\"https://proxy.moonchan.xyz/bfs/archive/942752679f58223257855b4d8ed0299ee5c71904.jpg?proxy_host=i0.hdslb.com\", 200, 100);\n\n            // 加载并绘制图像\n            const img = new Image();\n            img.src = src;\n\n            img.onload = () => {\n                m.drawImage(img, 200, 100, 800, 600,);\n                m.drawImage(img, 300, 150, 900, 650,);\n                m.drawImageSlice(img, 400, 400, 500, 500, 1600, 150, 200, 300,);\n                m.drawImageSlice(img, 800, 400, 500, 500, 1800, 300, 200, 300,);\n            };\n\n            img.onerror = (error) => {\n                console.error(\"Image load error:\", error);\n            };\n\n\n            const ctx = m.getContext();\n\n            ctx.font = 'bold 24px Consolas'; // 设置字体大小和字体类型\n\n            //     // ctx.scale(2, 2); // 将绘制区域在 x 和 y 方向上都缩放 2 倍\n            //     ctx.fillText('Hello, Canvas!啊啊', 50, 50); // 这里的坐标会被缩放\n            //     // ctx.setTransform(1, 0, 0, 1, 0, 0); // 重置变换\n\n            //     // ctx.scale(1, 1); // 将绘制区域在 x 和 y 方向上都缩放 2 倍\n            //     ctx.fillText(\n            //         'Visual Studio Code（VSCode）的默认字体是 \"Courier New\"，但用户可以根据个人喜好在设置中更改字体。常见的编程字体还包括 \"Fira Code\"、\"Consolas\"、\"Monaco\" 和 \"Source Code Pro\" 等。你可以在 VSCode 的设置中找到字体选项，进行自定义设置。',\n            //          250, 100); // 这里的坐标会被缩放\n            //     // ctx.setTransform(1, 0, 0, 1, 0, 0); // 重置变换\n\n            const [xx, yy] = m.drawText(\n                \"123456789012345678901234567890123456789012345678901234567890123456789\\r\\nq0123456789012345678901234567890\"\n                , 50, 50, 500, \"white\")\n            m.drawPoint(xx, yy)\n\n            m.initImages({\n                'background': 'https://upload.moonchan.xyz/api/01LLWEUU2LRX4IM56ORJFIBC3OE3YTMPN7/bg000.jpg',\n                'dialogueBox': 'https://upload.moonchan.xyz/api/01LLWEUU7LESNYUQKX5VDJGMVDZY3SRS7I/main_gallery.png',\n                'c1': 'https://upload.moonchan.xyz/api/01LLWEUU5FPZ7ZWIFZN5DIVS27ONL4RII3/随一立绘.png',\n                'c2': 'https://upload.moonchan.xyz/api/01LLWEUUYMMYE5CZOYHBBKH55CZEMQ7AFV/随一魔法装.png',\n            })\n            m.initScriptManager([\n                {\n                    name:\"a\",\n                    text:\"测试\",\n                },{\n                    name:\"a\",\n                    text:\"123\",\n                },{\n                    name:\"a\",\n                    text:\"321\",\n                },{\n                    name:\"a\",\n                    text:\"测试测试测试测试\",\n                },{\n                    name:\"a\",\n                    text:\"3111\",\n                },{\n                    name: \"\",\n                    text: \"这是随一，很可爱\",\n                    characters: [\n                        { name: \"c2\", positionX: 250, positionY: 100 },\n                    ],            \n                },{\n                    name: \"\",\n                    text: \"这也是随一，很可爱\",\n                    characters: [\n                        { name: \"c1\", positionX: 250, positionY: 100 },\n                    ],            \n                },{\n                    name: \"\",\n                    text: \"这两个都是随一，很可爱\",\n                    characters: [\n                        { name: \"c1\", positionX: 50, positionY: 100 },\n                        { name: \"c2\", positionX: 550, positionY: 100 },\n                    ],            \n                },{\n                    name: \"watashi\",\n                    text: \"啊我甚至不知道为什么代码写成这样也能work.要自己修一下。。\"\n                },{\n                    name: \"watashi\",\n                    text: \"清理work吗，可能不work，竟然work了。是我肤浅了，GPT爹\",\n                    characters: []\n                }\n            ])\n\n            setTimeout(() => {\n                m.initInput();\n            }, 1000)\n        }\n\n        test()\n\n    }, []);\n\n    return (\n        <div className=\"flex flex-col h-screen bg-black w-full\" ref={containerRef}>\n            {/* 画布区域 */}\n            <div className=\"flex-grow flex justify-center items-center\">\n                <canvas ref={canvasRef} className=\"border border-black\" />\n            </div>\n        </div>\n    );\n};\n\nexport default CanvasComponent;"],"names":["constructor","canvas","baseWidth","baseHeight","context","width","height","this","getContext","scale","setSize","transformCoordinates","x","y","drawRect","color","arguments","length","undefined","fillStyle","fillRect","drawPoint","beginPath","arc","Math","PI","fill","closePath","clear","clearRect","drawBackground","setAlpha","alpha","globalAlpha","drawImage","img","drawImageSlice","sx","sy","sWidth","sHeight","drawText","text","maxWidth","match","font","parseInt","i","measureText","substring","strokeText","fillText","dialogueData","currentIndex","characterStates","getCurrentScript","currentDialogue","characters","index","getNextScript","script","reset","CanvasManager","super","images","scriptManager","renderState","background","dialogueBox","dialogueText","characterName","clickCount","isTyping","currentText","typingIndex","typingTimeout","lastRenderTime","typingInterval","startRenderLoop","initImages","promises","key","promise","Promise","resolve","reject","Image","src","onload","onerror","Error","push","all","initScriptManager","ScriptManager","initInput","addEventListener","handleClick","finishTyping","_this$scriptManager","resetState","startTyping","name","_this$scriptManager2","typeNextCharacter","clearTimeout","slice","window","setTimeout","render","forEach","_ref","positionX","positionY","dialogueBoxHeight","nameX","nameY","textX","textY","loop","time","requestAnimationFrame","CanvasComponent","canvasRef","useRef","containerRef","canvasManagerRef","useEffect","canvasWidth","current","offsetWidth","canvasHeight","canvasManager","AVDManager","scrollIntoView","behavior","block","m","error","console","xx","yy","test","_jsx","className","ref","children"],"sourceRoot":""}