{"version":3,"file":"static/js/596.555505ce.chunk.js","mappings":"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","sources":["Tools/Proxy/utils.ts","browser/RequestForm.jsx"],"sourcesContent":["// 24-11-16：这个函数能够对准endpoint代理一个需要CORS的请求。这里是为了得到bilibili封面用的。\r\n// \"X-Host\",\r\n// \"X-Origin\",\r\n// \"X-Referer\",\r\n// 这些会替换那些不让传的，Host是这里设定的\r\nexport const END_POINT = \"proxy.moonchan.xyz\"\r\n// 目前访问的时候有挺多问题的\r\n// 比如host没有port，忘记后端哪边改了没有了\r\n\r\n\r\n\r\nexport function fetchWithProxy(\r\n  input: string | URL,\r\n  init?: RequestInit,\r\n): Promise<Response> {\r\n  const url = new URL(input);\r\n  const endpoint = \"https://\" + END_POINT + url.pathname + url.search\r\n\r\n  if (!init) {\r\n    return fetch(endpoint, {\r\n      headers: {\r\n        \"X-Host\": url.hostname,\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!init.headers) {\r\n    init.headers = {}; // 如果 init.headers 不存在，则初始化为空对象\r\n  }\r\n\r\n  // 这段代码不知道怎么debug，简化不了，就留在这里了\r\n\r\n  // 检查 init.headers 是否是 Headers 对象\r\n  if (init.headers instanceof Headers) {\r\n    init.headers.append(\"X-Host\", url.hostname); // 使用 append 方法添加头\r\n  } else if (Array.isArray(init.headers)) {\r\n    // 如果是一个数组类型，使用 push 添加新的头\r\n    init.headers.push([\"X-Host\", url.hostname]);\r\n  } else {\r\n    // 将 init.headers 断言为 Record<string, string>\r\n    const headers = init.headers as Record<string, string>;\r\n    headers[\"X-Host\"] = url.hostname; // 添加 X-Host 头\r\n  }\r\n\r\n  return fetch(endpoint, init); // 使用更新后的 init 进行 fetch\r\n}\r\n\r\nexport function getProxyURL(input: string) {\r\n  console.log(input)\r\n  if (input === \"\") return input;\r\n  const url = new URL(input);\r\n  url.searchParams.set('proxy_host', url.hostname); // 替换为实际的 proxy_host 值\r\n  url.hostname = END_POINT;\r\n  return url.toString();\r\n}","import React, { useState } from 'react';\nimport { fetchWithProxy } from '../Tools/Proxy/utils';\n\nconst RequestForm = () => {\n    const [method, setMethod] = useState('GET');\n    const [url, setUrl] = useState('');\n    const [useProxy, setUseProxy] = useState(false);\n    const [headers, setHeaders] = useState([{ key: '', value: '' }]);\n    const [body, setBody] = useState('');\n    const [response, setResponse] = useState({\n        body: '这是响应的主体内容。',\n        headers: '这是响应的头部信息。',\n    });\n    const [showBody, setShowBody] = useState(true); // 默认显示 Body\n\n    const handleAddHeader = () => {\n        setHeaders([...headers, { key: '', value: '' }]);\n    };\n\n    const handleHeaderChange = (index, field, value) => {\n        const newHeaders = [...headers];\n        newHeaders[index][field] = value;\n        setHeaders(newHeaders);\n    };\n\n    const handleSubmit = async () => {\n        // 发送请求的逻辑\n        console.log('Sending request:', { method, url, useProxy, headers, body });\n        // TODO: 使用 fetch 或 axios 发送请求并处理响应\n        try {\n            let requestHeaders = {}\n            headers.map(header => { if (header.key) requestHeaders[header.key] = header.value })\n            let response\n            if (useProxy) {\n                response = await fetchWithProxy(url, {\n                    method: method,\n                    headers: requestHeaders,\n                    body: method === \"GET\" ? null : body,\n                })\n            } else {\n                response = await fetch(url, {\n                    method: method,\n                    headers: requestHeaders,\n                    body: method === \"GET\" ? null : body,\n                })\n            }\n            let respHeaders = {}\n            response.headers.forEach((v, k) => { respHeaders[k] = v })\n            setResponse({\n                headers: respHeaders,\n                body: await response.text(),\n            })\n        } catch (err) {\n            console.log(err)\n        }\n    };\n\n    return (\n        <div className=\"p-4\">\n            <div className=\"flex mb-4\">\n                <select\n                    value={method}\n                    onChange={(e) => setMethod(e.target.value)}\n                    className=\"border rounded p-2 mr-2\"\n                >\n                    <option value=\"GET\">GET</option>\n                    <option value=\"POST\">POST</option>\n                    <option value=\"PUT\">PUT</option>\n                    <option value=\"DELETE\">DELETE</option>\n                </select>\n                <input\n                    type=\"text\"\n                    value={url}\n                    onChange={(e) => setUrl(e.target.value)}\n                    placeholder=\"Enter URL\"\n                    className=\"border rounded p-2 flex-grow mr-2\"\n                />\n                <label className=\"flex items-center mr-4\">\n                    <input\n                        type=\"checkbox\"\n                        checked={useProxy}\n                        onChange={(e) => setUseProxy(e.target.checked)}\n                    />\n                    Use Proxy\n                </label>\n                <button\n                    onClick={handleSubmit}\n                    className=\"bg-blue-500 text-white rounded p-2\"\n                >\n                    Send Request\n                </button>\n            </div>\n            <div className=\"mb-4\">\n                {headers.map((header, index) => (\n                    <div key={index} className=\"flex mb-2\">\n                        <input\n                            type=\"text\"\n                            value={header.key}\n                            onChange={(e) => handleHeaderChange(index, 'key', e.target.value)}\n                            placeholder=\"Header\"\n                            className=\"border rounded p-2 mr-2\"\n                        />\n                        <input\n                            type=\"text\"\n                            value={header.value}\n                            onChange={(e) => handleHeaderChange(index, 'value', e.target.value)}\n                            placeholder=\"Value\"\n                            className=\"border rounded p-2 mr-2 flex-1\"\n                        />\n                    </div>\n                ))}\n                <button\n                    onClick={handleAddHeader}\n                    className=\"bg-green-500 text-white rounded p-2\"\n                >\n                    Add Header\n                </button>\n            </div>\n            <textarea\n                value={body}\n                onChange={(e) => setBody(e.target.value)}\n                placeholder=\"Request Body\"\n                className=\"border rounded p-2 w-full h-32 mb-4\"\n            />\n            <div className=\"border rounded p-4 bg-gray-100 mt-4\">\n                <h3 className=\"font-bold\">Response:</h3>\n                <div className=\"mb-2\">\n                    <button\n                        onClick={() => setShowBody(!showBody)}\n                        className={`mr-2 p-2 rounded ${showBody ? 'bg-blue-500 text-white' : 'bg-gray-300'}`}\n                    >\n                        显示 Body\n                    </button>\n                    <button\n                        onClick={() => setShowBody(!showBody)}\n                        className={`p-2 rounded ${!showBody ? 'bg-blue-500 text-white' : 'bg-gray-300'}`}\n                    >\n                        显示 Header\n                    </button>\n                </div>\n                <pre>\n                    {showBody ? response.body : JSON.stringify(response.headers, null, 2)}\n                </pre>\n            </div>\n\n        </div>\n    );\n};\n\nexport default RequestForm;"],"names":["END_POINT","fetchWithProxy","input","init","url","URL","endpoint","pathname","search","fetch","headers","hostname","Headers","append","Array","isArray","push","getProxyURL","console","log","searchParams","set","toString","RequestForm","method","setMethod","useState","setUrl","useProxy","setUseProxy","setHeaders","key","value","body","setBody","response","setResponse","showBody","setShowBody","handleHeaderChange","index","field","newHeaders","_jsxs","className","children","onChange","e","target","_jsx","type","placeholder","checked","onClick","async","requestHeaders","map","header","respHeaders","forEach","v","k","text","err","handleAddHeader","JSON","stringify"],"sourceRoot":""}