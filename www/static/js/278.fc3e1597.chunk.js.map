{"version":3,"file":"static/js/278.fc3e1597.chunk.js","mappings":"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","sources":["threeCanvas/constants.ts","threeCanvas/ThreeCanvas.jsx","threeCanvas/ControlsPanel.jsx","threeCanvas/App.jsx"],"sourcesContent":["// src/constants.js\nexport const TILE_SIZE = 40;\n\n// 0: empty, 1: wall, 2: player_start, 3: target, 4: box_start, 5: box_on_target_start\nexport const initialLevel = [\n    [1,1,1,1,1,1,1,1],\n    [1,0,0,0,0,0,0,1],\n    [1,0,3,4,2,0,0,1],\n    [1,0,0,1,4,3,0,1],\n    [1,1,1,1,1,1,1,1]\n];\n\nexport const ELEMENT_TYPES = {\n    EMPTY: 0,\n    WALL: 1,\n    PLAYER: 2,\n    TARGET: 3,\n    BOX: 4,\n    BOX_ON_TARGET: 5, // Could be useful for initial setup if a box starts on a target\n};\n\nexport const DEFAULT_COLORS = {\n    player: '#00ff00', // Green\n    box: '#ffff00',    // Yellow\n    wall: '#888888',    // Dark Gray\n    target: '#ff0000',  // Red\n    grid: '#444444',\n    background: '#282c34',\n};","// src/components/ThreeCanvas.js\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { TILE_SIZE, DEFAULT_COLORS } from './constants';\n\nconst ThreeCanvas = ({\n    playerData, // { x, y, color } grid coordinates\n    boxesData,  // [{ id, x, y, color }, ...] grid coordinates\n    wallsData,  // [{ x, y, color }, ...] grid coordinates\n    targetsData, // [{ x, y, color }, ...] grid coordinates\n    gameDimensions, // { width, height } of the level in tiles\n    settings\n}) => {\n    const mountRef = useRef(null); // 加载用的div\n    const sceneRef = useRef(null); // THREE.Scene, 存储一系列的需要绘制的对象\n    const cameraRef = useRef(null); // THREE.OrthographicCamera\n    const rendererRef = useRef(null); // THREE.WebGLRenderer\n    const gameElementsGroupRef = useRef(null); // To easily clear and re-add game specific meshes\n\n    useEffect(() => {\n        // Basic Three.js setup\n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n\n        sceneRef.current = new THREE.Scene();\n        sceneRef.current.background = new THREE.Color(settings?.backgroundColor || DEFAULT_COLORS.background);\n\n        // Orthographic Camera\n        // Centering the view on the game board\n        const gameWidthWorld = gameDimensions.width * TILE_SIZE;\n        const gameHeightWorld = gameDimensions.height * TILE_SIZE;\n\n        cameraRef.current = new THREE.OrthographicCamera(\n            -width / 2, width / 2,\n            height / 2, -height / 2,\n            1, 1000\n        );\n        // Position camera to look down, centered on the game board\n        cameraRef.current.position.set(gameWidthWorld / 2 - TILE_SIZE / 2, 200, gameHeightWorld / 2 - TILE_SIZE / 2);\n        cameraRef.current.lookAt(gameWidthWorld / 2 - TILE_SIZE / 2, 0, gameHeightWorld / 2 - TILE_SIZE / 2);\n        cameraRef.current.zoom = Math.min(width / gameWidthWorld, height / gameHeightWorld) * 0.8; // Adjust zoom\n        cameraRef.current.updateProjectionMatrix();\n\n\n        rendererRef.current = new THREE.WebGLRenderer({ antialias: true });\n        rendererRef.current.setSize(width, height);\n        mountRef.current.appendChild(rendererRef.current.domElement);\n\n        // Lighting\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n        sceneRef.current.add(ambientLight);\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n        directionalLight.position.set(50, 100, 75);\n        sceneRef.current.add(directionalLight);\n\n        // Grid Helper (optional, but good for orientation)\n        const gridHelper = new THREE.GridHelper(\n            Math.max(gameWidthWorld, gameHeightWorld) + TILE_SIZE * 2,\n            Math.max(gameDimensions.width, gameDimensions.height) + 2,\n            settings?.gridColor || DEFAULT_COLORS.grid,\n            settings?.gridColor || DEFAULT_COLORS.grid\n        );\n        gridHelper.position.set(gameWidthWorld/2 - TILE_SIZE/2, 0, gameHeightWorld/2 - TILE_SIZE/2);\n        gridHelper.rotation.x = 0; // For XZ plane view\n        sceneRef.current.add(gridHelper);\n\n        // Group for dynamic game elements\n        gameElementsGroupRef.current = new THREE.Group();\n        sceneRef.current.add(gameElementsGroupRef.current);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            rendererRef.current.render(sceneRef.current, cameraRef.current);\n        };\n        animate();\n\n        const handleResize = () => {\n            const w = mountRef.current.clientWidth;\n            const h = mountRef.current.clientHeight;\n            rendererRef.current.setSize(w, h);\n            cameraRef.current.left = -w / 2;\n            cameraRef.current.right = w / 2;\n            cameraRef.current.top = h / 2;\n            cameraRef.current.bottom = -h / 2;\n            // Re-calculate zoom on resize\n            cameraRef.current.zoom = Math.min(w / gameWidthWorld, h / gameHeightWorld) * 0.8;\n            cameraRef.current.updateProjectionMatrix();\n        };\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n            if (mountRef.current && rendererRef.current.domElement) {\n                 // eslint-disable-next-line\n                mountRef.current.removeChild(rendererRef.current.domElement);\n            }\n            // Dispose Three.js objects\n            rendererRef.current.dispose();\n            // You should also dispose geometries, materials, textures in a real app\n        };\n    }, [gameDimensions, settings?.backgroundColor, settings?.gridColor]); // Re-init if gameDimensions or critical settings change\n\n    // Effect to update game elements\n    useEffect(() => {\n        if (!sceneRef.current || !gameElementsGroupRef.current) return;\n\n        // Clear previous elements\n        while (gameElementsGroupRef.current.children.length > 0) {\n            const child = gameElementsGroupRef.current.children[0];\n            gameElementsGroupRef.current.remove(child);\n            if (child.geometry) child.geometry.dispose();\n            if (child.material) {\n                if (Array.isArray(child.material)) {\n                    child.material.forEach(m => m.dispose());\n                } else {\n                    child.material.dispose();\n                }\n            }\n        }\n\n        // Create Walls\n        wallsData.forEach(wall => {\n            // const geometry = new THREE.BoxGeometry(TILE_SIZE, TILE_SIZE, TILE_SIZE);\n            const geometry = new THREE.PlaneGeometry(TILE_SIZE, TILE_SIZE);\n            const material = new THREE.MeshPhongMaterial({ color: wall.color, side: THREE.DoubleSide });\n            const mesh = new THREE.Mesh(geometry, material);\n            mesh.rotation.x = -Math.PI / 2; // 转为水平面（XZ平面） \n            mesh.position.set(wall.x * TILE_SIZE, TILE_SIZE / 2, wall.y * TILE_SIZE);\n            gameElementsGroupRef.current.add(mesh);\n        });\n\n        // Create Targets\n        targetsData.forEach(target => {\n            const geometry = new THREE.RingGeometry(TILE_SIZE * 0.25, TILE_SIZE * 0.35, 32);\n            const material = new THREE.MeshBasicMaterial({\n                color: target.color,\n                side: THREE.DoubleSide\n            });\n            const mesh = new THREE.Mesh(geometry, material);\n            mesh.rotation.x = -Math.PI / 2;\n            mesh.position.set(target.x * TILE_SIZE, 0.1, target.y * TILE_SIZE); // Slightly above ground\n            gameElementsGroupRef.current.add(mesh);\n        });\n\n        // Create Boxes\n        boxesData.forEach(box => {\n            const geometry = new THREE.BoxGeometry(TILE_SIZE * 0.8, TILE_SIZE * 0.8, TILE_SIZE * 0.8);\n            const material = new THREE.MeshPhongMaterial({ color: box.color });\n            const mesh = new THREE.Mesh(geometry, material);\n            mesh.position.set(box.x * TILE_SIZE, TILE_SIZE / 2, box.y * TILE_SIZE);\n            gameElementsGroupRef.current.add(mesh);\n        });\n\n        // Create Player\n        if (playerData) {\n            const geometry = new THREE.BoxGeometry(TILE_SIZE * 0.75, TILE_SIZE * 0.75, TILE_SIZE * 0.75);\n            const material = new THREE.MeshPhongMaterial({ color: playerData.color });\n            const playerMesh = new THREE.Mesh(geometry, material);\n            playerMesh.position.set(playerData.x * TILE_SIZE, TILE_SIZE / 2, playerData.y * TILE_SIZE);\n            gameElementsGroupRef.current.add(playerMesh);\n        }\n\n    }, [playerData, boxesData, wallsData, targetsData]); // Re-render elements if data changes\n\n    return <div ref={mountRef} style={{ width: '100%', height: '100%', position: 'absolute', top: 0, left: 0, zIndex: 0 }} />;\n};\n\nexport default ThreeCanvas;","// src/components/ControlsPanel.js\nimport React, { useState } from 'react';\n\nconst ControlsPanel = ({ settings, onSettingChange, onResetLevel, onShowInstructions }) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n\n    const handleColorChange = (key, value) => {\n        onSettingChange(key, value);\n    };\n\n    if (!settings) return null; // Or some loading indicator\n\n    return (\n        <div style={{\n            position: 'fixed',\n            top: '10px',\n            right: '10px',\n            background: 'rgba(0,0,0,0.7)',\n            color: 'white',\n            padding: '10px',\n            borderRadius: '5px',\n            zIndex: 1000,\n            minWidth: '200px'\n        }}>\n            <button onClick={() => setIsExpanded(!isExpanded)} style={{ marginBottom: '10px', width: '100%' }}>\n                {isExpanded ? 'Hide Settings' : 'Show Settings'}\n            </button>\n            {isExpanded && (\n                <>\n                    <div>\n                        <label>Player Color: </label>\n                        <input type=\"color\" value={settings.playerColor} onChange={(e) => handleColorChange('playerColor', e.target.value)} />\n                    </div>\n                    <div>\n                        <label>Box Color: </label>\n                        <input type=\"color\" value={settings.boxColor} onChange={(e) => handleColorChange('boxColor', e.target.value)} />\n                    </div>\n                    <div>\n                        <label>Wall Color: </label>\n                        <input type=\"color\" value={settings.wallColor} onChange={(e) => handleColorChange('wallColor', e.target.value)} />\n                    </div>\n                    <div>\n                        <label>Target Color: </label>\n                        <input type=\"color\" value={settings.targetColor} onChange={(e) => handleColorChange('targetColor', e.target.value)} />\n                    </div>\n                     <div>\n                        <label>Grid Color: </label>\n                        <input type=\"color\" value={settings.gridColor} onChange={(e) => handleColorChange('gridColor', e.target.value)} />\n                    </div>\n                     <div>\n                        <label>Background: </label>\n                        <input type=\"color\" value={settings.backgroundColor} onChange={(e) => handleColorChange('backgroundColor', e.target.value)} />\n                    </div>\n                    <button onClick={onResetLevel} style={{ marginTop: '10px', width: '100%' }}>Reset Level (R)</button>\n                </>\n            )}\n             <button onClick={onShowInstructions} style={{ marginTop: '5px', width: '100%' }}>\n                Instructions\n            </button>\n        </div>\n    );\n};\n\nexport default ControlsPanel;","// src/App.js\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport ThreeCanvas from './ThreeCanvas';\nimport ControlsPanel from './ControlsPanel';\n// import OnScreenControls from './OnScreenControls';\nimport {\n    initialLevel, ELEMENT_TYPES,\n    // TILE_SIZE,\n    DEFAULT_COLORS\n} from './constants.ts';\n// import './styles.css'; // We'll create this file\n\nconst App = () => {\n    const [level, setLevel] = useState(initialLevel); // Current level structure\n    const [playerPos, setPlayerPos] = useState({ x: 0, y: 0 });\n    const [boxes, setBoxes] = useState([]); // [{ id, x, y }]\n    const [targets, setTargets] = useState([]);\n    const [walls, setWalls] = useState([]);\n    const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won'\n    const [moveHistory, setMoveHistory] = useState([]); // For undo, if desired later\n\n    const [settings, setSettings] = useState({\n        playerColor: DEFAULT_COLORS.player,\n        boxColor: DEFAULT_COLORS.box,\n        wallColor: DEFAULT_COLORS.wall,\n        targetColor: DEFAULT_COLORS.target,\n        gridColor: DEFAULT_COLORS.grid,\n        backgroundColor: DEFAULT_COLORS.background,\n    });\n\n    const gameDimensions = useMemo(() => ({\n        width: level[0]?.length || 0,\n        height: level?.length || 0,\n    }), [level]);\n\n    const parseLevel = useCallback(() => {\n        const newPlayerPos = { x: 0, y: 0 };\n        const newBoxes = [];\n        const newTargets = [];\n        const newWalls = [];\n        let boxIdCounter = 0;\n\n        level.forEach((row, y) => {\n            row.forEach((cell, x) => {\n                switch (cell) {\n                    case ELEMENT_TYPES.PLAYER:\n                        newPlayerPos.x = x;\n                        newPlayerPos.y = y;\n                        break;\n                    case ELEMENT_TYPES.BOX:\n                        newBoxes.push({ id: `box-${boxIdCounter++}`, x, y });\n                        break;\n                    case ELEMENT_TYPES.TARGET:\n                        newTargets.push({ x, y });\n                        break;\n                    case ELEMENT_TYPES.WALL:\n                        newWalls.push({ x, y });\n                        break;\n                    case ELEMENT_TYPES.BOX_ON_TARGET: // If you use this\n                        newBoxes.push({ id: `box-${boxIdCounter++}`, x, y });\n                        newTargets.push({ x, y });\n                        break;\n                    default:\n                        break;\n                }\n            });\n        });\n        setPlayerPos(newPlayerPos);\n        setBoxes(newBoxes);\n        setTargets(newTargets);\n        setWalls(newWalls);\n        setGameStatus('playing');\n        setMoveHistory([]);\n    }, [level]); // Add 'level' as dependency\n\n    useEffect(() => {\n        parseLevel();\n    }, [parseLevel]); // parseLevel will change if 'level' changes (for future multi-level games)\n\n    const checkWinCondition = useCallback(() => {\n        if (targets.length === 0 || boxes.length === 0) return false;\n        const won = targets.every(target =>\n            boxes.some(box => box.x === target.x && box.y === target.y)\n        );\n        if (won) {\n            setGameStatus('won');\n            // setTimeout(() => alert(\"恭喜通关！\"), 100); // alert can mess with focus\n        }\n        return won;\n    }, [boxes, targets]);\n\n    useEffect(() => {\n        if (gameStatus === 'playing') {\n            checkWinCondition();\n        }\n    }, [boxes, gameStatus, checkWinCondition]);\n\n\n    const handleMove = useCallback((dx, dy) => {\n        if (gameStatus === 'won') return;\n\n        const newPlayerX = playerPos.x + dx;\n        const newPlayerY = playerPos.y + dy;\n\n        // Boundary check\n        if (newPlayerX < 0 || newPlayerX >= gameDimensions.width ||\n            newPlayerY < 0 || newPlayerY >= gameDimensions.height) {\n            return;\n        }\n\n        // Wall collision check\n        if (walls.some(wall => wall.x === newPlayerX && wall.y === newPlayerY)) {\n            return;\n        }\n\n        // Box collision/push check\n        const boxIndex = boxes.findIndex(box => box.x === newPlayerX && box.y === newPlayerY);\n        if (boxIndex !== -1) {\n            const newBoxX = newPlayerX + dx;\n            const newBoxY = newPlayerY + dy;\n\n            // Boundary check for box\n            if (newBoxX < 0 || newBoxX >= gameDimensions.width ||\n                newBoxY < 0 || newBoxY >= gameDimensions.height) {\n                return;\n            }\n            // Box collision with another box or wall\n            if (walls.some(wall => wall.x === newBoxX && wall.y === newBoxY) ||\n                boxes.some(b => b.x === newBoxX && b.y === newBoxY)) {\n                return;\n            }\n\n            // Move box\n            const newBoxes = [...boxes];\n            newBoxes[boxIndex] = { ...newBoxes[boxIndex], x: newBoxX, y: newBoxY };\n            setBoxes(newBoxes);\n        }\n\n        // Record move for undo (optional)\n        // setMoveHistory(prev => [...prev, { playerPos, boxes }]);\n\n        // Move player\n        setPlayerPos({ x: newPlayerX, y: newPlayerY });\n\n    }, [playerPos, boxes, walls, gameDimensions, gameStatus]);\n\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            if (gameStatus === 'won' && e.key.toLowerCase() !== 'r') return;\n\n            switch (e.key.toLowerCase()) {\n                case 'arrowup':\n                case 'w':\n                    handleMove(0, -1);\n                    break;\n                case 'arrowdown':\n                case 's':\n                    handleMove(0, 1);\n                    break;\n                case 'arrowleft':\n                case 'a':\n                    handleMove(-1, 0);\n                    break;\n                case 'arrowright':\n                case 'd':\n                    handleMove(1, 0);\n                    break;\n                case 'r':\n                    parseLevel(); // Reset\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n        return () => window.removeEventListener('keydown', handleKeyDown);\n    }, [handleMove, parseLevel, gameStatus]);\n\n    const handleSettingChange = (key, value) => {\n        setSettings(prev => ({ ...prev, [key]: value }));\n    };\n\n    const showInstructions = () => {\n        alert(\"Sokoban Game Instructions:\\n\\n- Use Arrow Keys or WASD to move the player (green cube).\\n- Push the yellow boxes onto the red target circles.\\n- All targets must be covered by boxes to win.\\n- Press 'R' to reset the current level.\\n- You can customize colors in the 'Show Settings' panel.\\n- On-screen directional buttons are draggable.\");\n    };\n\n    // Prepare data for ThreeCanvas\n    const playerDataForCanvas = useMemo(() => ({\n        ...playerPos,\n        color: settings.playerColor\n    }), [playerPos, settings.playerColor]);\n\n    const boxesDataForCanvas = useMemo(() => boxes.map(box => ({\n        ...box,\n        color: settings.boxColor\n    })), [boxes, settings.boxColor]);\n\n    const wallsDataForCanvas = useMemo(() => walls.map(wall => ({\n        ...wall,\n        color: settings.wallColor\n    })), [walls, settings.wallColor]);\n\n    const targetsDataForCanvas = useMemo(() => targets.map(target => ({\n        ...target,\n        color: settings.targetColor\n    })), [targets, settings.targetColor]);\n\n\n    return (\n        <div className=\"h-full\">\n            {gameStatus === 'won' && (\n                <div className=\"win-message\">\n                    Congratulations! You Won!\n                    <button onClick={parseLevel}>Play Again (R)</button>\n                </div>\n            )}\n            <div id=\"info-text\" style={{ position: 'absolute', top: '10px', left: '10px', color: 'white', zIndex: 10 }}>\n                Use Arrow/WASD keys to move. R to reset.\n            </div>\n\n            <ThreeCanvas\n                playerData={playerDataForCanvas}\n                boxesData={boxesDataForCanvas}\n                wallsData={wallsDataForCanvas}\n                targetsData={targetsDataForCanvas}\n                gameDimensions={gameDimensions}\n                settings={settings}\n            />\n            <ControlsPanel\n                settings={settings}\n                onSettingChange={handleSettingChange}\n                onResetLevel={parseLevel}\n                onShowInstructions={showInstructions}\n            />\n            {/* <OnScreenControls onMove={handleMove} /> */}\n        </div>\n    );\n};\n\nexport default App;"],"names":["TILE_SIZE","initialLevel","ELEMENT_TYPES","DEFAULT_COLORS","_ref","playerData","boxesData","wallsData","targetsData","gameDimensions","settings","mountRef","useRef","sceneRef","cameraRef","rendererRef","gameElementsGroupRef","useEffect","width","current","clientWidth","height","clientHeight","THREE","background","backgroundColor","gameWidthWorld","gameHeightWorld","position","set","lookAt","zoom","Math","min","updateProjectionMatrix","antialias","setSize","appendChild","domElement","ambientLight","add","directionalLight","gridHelper","max","gridColor","rotation","x","animate","requestAnimationFrame","render","handleResize","w","h","left","right","top","bottom","window","addEventListener","removeEventListener","removeChild","dispose","children","length","child","remove","geometry","material","Array","isArray","forEach","m","wall","color","side","mesh","PI","y","target","box","playerMesh","_jsx","ref","style","zIndex","onSettingChange","onResetLevel","onShowInstructions","isExpanded","setIsExpanded","useState","handleColorChange","key","value","_jsxs","padding","borderRadius","minWidth","onClick","marginBottom","_Fragment","type","playerColor","onChange","e","boxColor","wallColor","targetColor","marginTop","App","level","setLevel","playerPos","setPlayerPos","boxes","setBoxes","targets","setTargets","walls","setWalls","gameStatus","setGameStatus","moveHistory","setMoveHistory","setSettings","useMemo","_level$","parseLevel","useCallback","newPlayerPos","newBoxes","newTargets","newWalls","boxIdCounter","row","cell","push","id","checkWinCondition","won","every","some","handleMove","dx","dy","newPlayerX","newPlayerY","boxIndex","findIndex","newBoxX","newBoxY","b","handleKeyDown","toLowerCase","playerDataForCanvas","boxesDataForCanvas","map","wallsDataForCanvas","targetsDataForCanvas","className","ThreeCanvas","ControlsPanel","handleSettingChange","prev","showInstructions","alert"],"sourceRoot":""}