{"version":3,"file":"static/js/100.272aeb8a.chunk.js","mappings":"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","sources":["exhentai/ExImage-DS.js","exhentai/Exhentai.js"],"sourcesContent":["// 能用，但不想改了\nimport React, { useEffect, useState } from \"react\";\nimport { delay } from \"@/Tools/utils.ts\";\n\nconst ExImage = ({ path, showNext }) => {\n    // 基础域名配置\n    \n    // 不是这样\n    const searchParams =  new URLSearchParams(window.location.search)\n    // const host = \"https://\" +  searchParams.get(\"host\") || \"ehwv.moonchan.xyz\";\n    const host = searchParams.get(\"host\") ? window.location.origin : \"https://ehwv.moonchan.xyz\";\n\n    // console.log(host)\n\n    // 组件状态管理\n    const [imageSrc, setImageSrc] = useState(null);        // 当前图片地址\n    const [onErrorPath, setOnErrorPath] = useState(null);  // 错误备用路径\n    const [nextPath, setNextPath] = useState(null);        // 下一页路径\n    const [error, setError] = useState(null);              // 错误信息\n    const [retryCount, setRetryCount] = useState(0);       // 重试计数器\n    const [timerId, setTimerId] = useState(-1);            // 超时定时器ID\n    const [abort, setAbort] = useState(false);             // 中止加载标志\n    const [loaded, setLoaded] = useState(false);           // 加载完成状态\n    \n    // 配置参数\n    const maxRetries = 3000;  // 最大重试次数（可能需要调整）\n\n    // DOM解析工具函数\n    const extractImageSrc = (doc) => doc.getElementById(\"img\")?.src;\n    const extractOnErrorPath = (doc) => {\n        const element = doc.getElementById(\"loadfail\");\n        const onclickHandler = element?.getAttribute('onclick') || '';\n        const regex = /nl\\(['\"]([^'\\\\]*(?:\\\\.[^'\\\\]*)*)['\"]\\)/g;\n\n        const pathParam = regex.exec(onclickHandler)[1];\n        \n        const url = new URL(path, host);\n        url.searchParams.append(\"nl\", pathParam);\n        return url.pathname + url.search;\n    };\n    const extractNextPath = async (doc) => {\n        try {\n            const url = new URL(doc.getElementById(\"next\")?.href || '');\n            // await delay(1000);  // 人为延迟防止请求风暴\n            return url.pathname;\n        } catch {\n            return null;\n        }\n    };\n\n    // 核心数据获取逻辑\n    useEffect(() => {\n        const fetchHtml = async () => {\n            if (abort) return;\n\n            try {\n                // 获取页面HTML\n                const response = await fetch(host + path);\n                if (!response.ok) throw new Error(\"请求失败\");\n                \n                // 解析DOM元素\n                const doc = new DOMParser().parseFromString(\n                    await response.text(),\n                    \"text/html\"\n                );\n\n                // 提取关键路径\n                setImageSrc(extractImageSrc(doc));\n                setOnErrorPath(extractOnErrorPath(doc));\n                extractNextPath(doc).then(setNextPath);\n                \n                // 设置10秒超时检测\n                if (timerId >= 0) clearInterval(timerId);\n                setTimerId(setInterval(() => setError(\"加载超时\"), 10000));\n\n            } catch (err) {\n                setError(err.message);\n                if (retryCount < maxRetries) setRetryCount(v => v + 1);\n            }\n        };\n\n        fetchHtml();\n        return () => clearInterval(timerId);  // 清理定时器\n    }, [path, retryCount, abort]);\n\n    // 渲染逻辑\n    return (\n        <>\n            {/* 主内容显示区 */}\n            {!abort && imageSrc && (\n                <div className=\"image-container\">\n                    <img\n                        className=\"w-full\"\n                        src={imageSrc}\n                        alt=\"加载失败，请点击重新加载并等待至多10秒\"\n                        onLoad={() => {\n                            clearInterval(timerId);\n                            setLoaded(true);\n                        }}\n                        onError={() => setError(\"图片加载失败\")}\n                    />\n                    \n                    {/* 加载中状态显示 */}\n                    {!loaded && <div className=\"loading-controls\">\n                        <button\n                            onClick={() => setAbort(true)}\n                            // className=\"reload-button\"\n                            className=\"px-6 py-3 bg-blue-500 text-white font-bold rounded shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-200\"\n                        >\n                            重新加载\n                        </button>\n                        <a href={host + path} className=\"source-link\">\n                            {host + path}\n                        </a>\n                    </div>}\n                </div>\n            )}\n\n            {/* 错误降级显示 */}\n            {abort && onErrorPath && (\n                <ExImage path={onErrorPath} showNext={false} />\n            )}\n\n            {/* 自动分页显示 */}\n            {showNext && nextPath && nextPath !== path && (\n                <ExImage path={nextPath} showNext={true} />\n            )}\n        </>\n    );\n};\n\nexport default ExImage;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport ExImage from './ExImage-DS';\n\nconst SComponent = () => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const currentPath = location.pathname; // 获取当前路径\n    // const searchParams = new URLSearchParams(location.search); // 获取查询参数\n    const [className, setClassName] = useState('');\n\n    // 示例：获取特定的查询参数\n    // const paramValue = searchParams.get('paramName');\n\n    // 状态管理：用于存储输入框的值\n    const [inputValue, setInputValue] = useState('');\n\n    // 处理输入框变化\n    const handleInputChange = (event) => {\n        setInputValue(event.target.value);\n    };\n\n    // 处理提交\n    const handleSubmit = (event) => {\n        event.preventDefault(); // 防止表单默认提交\n        navigate(`${inputValue}`); // 使用 navigate 改变 URL\n    };\n\n\n    useEffect(() => {\n        // 当 location 变化时执行的操作\n        console.log('Location has changed:', location.pathname);\n    }, [location]); // 依赖项为 location\n\n    const widthOptions = [\n        { label: 'auto', value: 'max-w-auto' },\n        { label: 'xs', value: 'max-w-xs' }, // 针对一些预定义的最大宽度 (需要自定义配置)\n        { label: 'sm', value: 'max-w-sm' },\n        { label: 'md', value: 'max-w-md' },\n        { label: 'lg', value: 'max-w-lg' },\n        { label: 'xl', value: 'max-w-xl' },\n        { label: '2xl', value: 'max-w-2xl' },\n        { label: '3xl', value: 'max-w-3xl' },\n        { label: '4xl', value: 'max-w-4xl' },\n        { label: '5xl', value: 'max-w-5xl' },\n        { label: '6xl', value: 'max-w-6xl' },\n        { label: '7xl', value: 'max-w-7xl' },\n    ];\n\n\n    return (\n        <div className={className}>\n            <h1 className='block-inline'>当前路径: {currentPath}</h1>\n            {/* <h2>查询参数值: {paramValue}</h2> */}\n            {/* <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                    placeholder=\"输入参数值\"\n                />\n                <button type=\"submit\">提交</button>\n            </form> */}\n            {widthOptions.map(value => (\n                <button className='px-6 py-3 bg-blue-500 text-white font-bold rounded shadow hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 transition duration-200'\n                    key={value.label}\n                    onClick={() => { setClassName(value.value) }}\n                >\n                    {value.label}\n                </button>\n            ))}\n            <ExImage path={currentPath} showNext={true} />\n        </div>\n    );\n};\n\nexport default SComponent;"],"names":["ExImage","_ref","path","showNext","host","URLSearchParams","window","location","search","get","origin","imageSrc","setImageSrc","useState","onErrorPath","setOnErrorPath","nextPath","setNextPath","error","setError","retryCount","setRetryCount","timerId","setTimerId","abort","setAbort","loaded","setLoaded","useEffect","async","response","fetch","ok","Error","doc","DOMParser","parseFromString","text","_doc$getElementById","getElementById","src","extractImageSrc","element","onclickHandler","getAttribute","pathParam","exec","url","URL","searchParams","append","pathname","extractOnErrorPath","_doc$getElementById2","href","extractNextPath","then","clearInterval","setInterval","err","message","v","fetchHtml","_jsxs","_Fragment","children","className","_jsx","alt","onLoad","onError","onClick","SComponent","useLocation","currentPath","useNavigate","setClassName","inputValue","setInputValue","console","log","label","value","map"],"sourceRoot":""}