{"version":3,"file":"static/js/304.f86d3ae9.chunk.js","mappings":"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","sources":["Tools/localstorage/useLocalStorageStatus.tsx","kuuki-mouse/InputBar.tsx","kuuki-mouse/ItemList.tsx","kuuki-mouse/KuukiMouse.tsx"],"sourcesContent":["import { useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react';\n\n// 类型定义，让 Hook 的返回值更清晰\ntype UseLocalStorageReturn<T> = [\n    T, // 存储的值\n    Dispatch<SetStateAction<T>>, // 更新值的函数，API 与 useState 的 setter 相同\n    Error | null // 错误状态\n];\n\n/**\n * 一个与 React.useState API 类似，但将状态持久化到 localStorage 的 Hook。\n * 它还支持跨标签页的同步和错误处理。\n * \n * @param key - 在 localStorage 中使用的键。\n * @param initialValue - 如果 localStorage 中没有值，则使用的初始值。\n * @returns [storedValue, setValue, error] - 一个包含当前值、更新函数和错误状态的数组。\n */\nexport default function useLocalStorage<T>(key: string, initialValue: T): UseLocalStorageReturn<T> {\n    // 初始化 initial Value\n    // 使用一个函数作为 useState 的初始值，以确保 localStorage.getItem 只在客户端初始渲染时执行一次。\n    // 这可以避免性能问题，并防止在 SSR (服务器端渲染) 环境下因 window 未定义而出错。\n    const [storedValue, setStoredValue] = useState<T>(() => {\n        // 如果在非浏览器环境（如 Next.js 服务器端），直接返回初始值\n        if (typeof window === 'undefined') {\n            return initialValue;\n        }\n\n        try {\n            // 尝试从 localStorage 获取已存在的值\n            const item = window.localStorage.getItem(key);\n            // 如果有值，则解析它；否则，返回初始值\n            return item ? (JSON.parse(item) as T) : initialValue;\n        } catch (error) {\n            // 如果解析出错，则打印错误并返回初始值\n            console.error(`Error reading localStorage key “${key}”:`, error);\n            return initialValue;\n        }\n    });\n\n    // 状态2: 存储可能发生的错误\n    const [error, setError] = useState<Error | null>(null);\n\n    // 使用 useCallback 来包装 setValue 函数，以确保其引用在渲染间保持稳定，\n    // 除非其依赖项（storedValue）发生变化。\n    // 不加入 storedValue会出现旧值。\n    const setValue: Dispatch<SetStateAction<T>> = useCallback(\n        (value) => {\n            try {\n                // 允许传入一个函数来计算新值，就像 useState 的 setter 一样\n                const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n                setStoredValue(valueToStore);\n\n                if (typeof window !== 'undefined') {\n                    const newValue = JSON.stringify(valueToStore);\n                    // 在浏览器环境中，将新值持久化到 localStorage\n                    window.localStorage.setItem(key, newValue);\n                    // 手动触发一个 storage 事件，以便同一页面内的其他 Hook 实例也能同步\n                    // `storage` 事件通常只通知其他页面\n                    // isTrusted = false, 且需要自己填数字。\n                    window.dispatchEvent(new StorageEvent('storage', { key, newValue }));\n                } else {\n                    // 更新 React 状态\n                }\n\n            } catch (err) {\n                // 如果 stringify 出错，则捕获并更新错误状态\n                const e = err as Error;\n                console.error(`Error setting localStorage key “${key}”:`, e);\n                setError(e);\n            }\n        },\n        [key, storedValue]\n    );\n\n    // Effect: 监听 localStorage 的 'storage' 事件\n    // 这个事件在其他标签页（或 iframe）修改了 localStorage 时触发\n    useEffect(() => {\n        // 确保在浏览器环境中执行\n        if (typeof window === 'undefined') return;\n\n        const handleStorageChange = (event: StorageEvent) => {\n            // 当事件对应的 key 是我们正在监听的 key，并且有新值时\n            console.log(event, event.key === key, event.newValue)\n            if (event.key === key && event.newValue) {\n                try {\n                    setStoredValue(JSON.parse(event.newValue) as T);\n                    setError(null); // 同步成功，清除错误\n                } catch (err) {\n                    const e = err as Error;\n                    console.error(`Error parsing new value for key “${key}” from storage event:`, e);\n                    setError(e);\n                }\n            }\n        };\n\n        // 添加事件监听器\n        window.addEventListener('storage', handleStorageChange);\n\n        // 清理函数：在组件卸载时移除监听器，防止内存泄漏\n        return () => {\n            window.removeEventListener('storage', handleStorageChange);\n        };\n    }, [key]); // 依赖数组中只有 key，因此只在 key 改变时重新绑定事件监听\n\n    return [storedValue, setValue, error];\n}","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\n\n// 1. 首先定义组件的 Props 接口\ninterface InputBarProps {\n    // onSubmit 是一个函数类型，它接收一个 string 类型的参数 (url)，并且没有返回值 (void)\n    onSubmit?: (url: string) => void;\n}\n\n// 2. 使用 React.FC (FunctionComponent) 泛型类型并传入上面定义的 Props 类型\n// 同时为 onSubmit 提供一个默认值，确保即使未传入该 prop 也能正常工作\nconst InputBar: React.FC<InputBarProps> = ({\n    onSubmit = (url: string) => { console.log(\"Submitted URL: \" + url) }\n}) => {\n    // 3. 使用 useState 来管理输入框的值，并明确其类型为 string\n    const [inputValue, setInputValue] = useState<string>('');\n\n    // 4. 处理输入框变化事件，使用 React.ChangeEvent 泛型类型指定事件目标为 HTMLInputElement\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.target.value);\n    };\n\n    // 5. 处理按键事件，特别是回车键提交\n    const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            handleSubmit();\n        }\n    };\n\n    // 6. 提交处理函数\n    const handleSubmit = () => {\n        if (inputValue.trim()) { // 简单的非空验证\n            onSubmit(inputValue.trim()); // 调用从 props 传入的 onSubmit 函数\n            setInputValue(''); // 清空输入框\n        }\n    };\n\n    return (\n        <div className=\"flex p-2.5\"> {/* 使用flex和padding工具类 */}\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyPress}\n                placeholder=\"Type your message or URL...\"\n                className=\"flex-grow mr-2 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\" /* 替换所有内联样式并添加边框、圆角、焦点样式 */\n            />\n            <button\n                onClick={handleSubmit}\n                className=\"px-4 py-2 bg-blue-500 text-white font-medium rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\" /* 替换内联样式并添加背景色、悬停、焦点等交互样式 */\n            >\n                Submit\n            </button>\n        </div>\n    );\n\n};\n\nexport default InputBar;","export default function ItemList({ \n  items, \n  onItemClick, \n  onDeleteItem \n}: { \n  items: string[]; \n  onItemClick?: (item: string) => void;\n  onDeleteItem?: (index: number) => void;\n}) {\n  return (\n    <ul className=\"space-y-3\"> {/* 列表项之间添加垂直间距 */}\n      {items.map((item, index) => (\n        <li \n          key={index} \n          className=\"flex justify-between items-center p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 cursor-default\"\n        >\n          {/* 可点击的文本区域，点击时触发 onItemClick 并传入当前项目标题 */}\n          <span \n            className=\"flex-1 cursor-pointer text-gray-800 hover:text-blue-600 transition-colors duration-150\"\n            onClick={() => onItemClick?.(item)} // 使用可选链操作符防止未定义错误\n          >\n            {item}\n          </span>\n          {/* 删除按钮，点击时触发 onDeleteItem 并传入当前索引 */}\n          <button \n            className=\"ml-4 bg-red-500 hover:bg-red-700 text-white font-semibold py-1 px-3 rounded-md transition-colors duration-150\"\n            onClick={() => onDeleteItem?.(index)} // 使用可选链操作符防止未定义错误\n            aria-label=\"删除项目\"\n          >\n            ×\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}","import { useState } from \"react\";\n\nimport InputBar from \"./InputBar\";\nimport ItemList from \"./ItemList\";\nimport Websocket from \"./Websocket\";\nimport App from \"./App\";\nimport useLocalStorage from \"../Tools/localstorage/useLocalStorageStatus\";\n\nexport default function KuukiMouse() {\n    const [item, setItem] = useState<string>(\"\");\n    const [items, setItems] = useLocalStorage(\"kuuki-mouse\", [\"ws://127.0.0.1:8765\"])\n\n    const onSubmit = (url: string) => {\n        setItems((prevItems: string[]) => [...prevItems, url]);\n    }\n    const onDeleteItem = (index: number) => {\n        setItems((prevItems: string[]) => prevItems.filter((_, i) => i !== index));\n    }\n    const onItemClick = (item: string) => {\n        setItem(item);\n    }\n\n    if (item !== \"\") {\n        return <main>\n            <App url={item} />\n        </main>\n    }\n\n    return <main>\n        <InputBar onSubmit={onSubmit} />\n        <ItemList items={items} onItemClick={onItemClick} onDeleteItem={onDeleteItem} />\n    </main>\n}"],"names":["useLocalStorage","key","initialValue","storedValue","setStoredValue","useState","window","item","localStorage","getItem","JSON","parse","error","console","setError","setValue","useCallback","value","valueToStore","Function","newValue","stringify","setItem","dispatchEvent","StorageEvent","err","e","useEffect","handleStorageChange","event","log","addEventListener","removeEventListener","_ref","onSubmit","url","inputValue","setInputValue","handleSubmit","trim","_jsxs","className","children","_jsx","type","onChange","target","onKeyDown","placeholder","onClick","ItemList","items","onItemClick","onDeleteItem","map","index","KuukiMouse","setItems","App","InputBar","prevItems","filter","_","i"],"sourceRoot":""}