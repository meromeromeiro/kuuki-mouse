{"version":3,"file":"static/js/833.8239658b.chunk.js","mappings":"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","sources":["Tools/Proxy/utils.ts","getProxyURL/GetProxyURLV2.js","Tools/shijima.ts"],"sourcesContent":["// 24-11-16：这个函数能够对准endpoint代理一个需要CORS的请求。这里是为了得到bilibili封面用的。\r\n// \"X-Host\",\r\n// \"X-Origin\",\r\n// \"X-Referer\",\r\n// 这些会替换那些不让传的，Host是这里设定的\r\nexport const END_POINT = \"proxy.moonchan.xyz\"\r\n// 目前访问的时候有挺多问题的\r\n// 比如host没有port，忘记后端哪边改了没有了\r\n\r\n\r\n\r\nexport function fetchWithProxy(\r\n  input: string | URL,\r\n  init?: RequestInit,\r\n): Promise<Response> {\r\n  const url = new URL(input);\r\n  const endpoint = \"https://\" + END_POINT + url.pathname + url.search\r\n\r\n  if (!init) {\r\n    return fetch(endpoint, {\r\n      headers: {\r\n        \"X-Host\": url.hostname,\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!init.headers) {\r\n    init.headers = {}; // 如果 init.headers 不存在，则初始化为空对象\r\n  }\r\n\r\n  // 这段代码不知道怎么debug，简化不了，就留在这里了\r\n\r\n  // 检查 init.headers 是否是 Headers 对象\r\n  if (init.headers instanceof Headers) {\r\n    init.headers.append(\"X-Host\", url.hostname); // 使用 append 方法添加头\r\n  } else if (Array.isArray(init.headers)) {\r\n    // 如果是一个数组类型，使用 push 添加新的头\r\n    init.headers.push([\"X-Host\", url.hostname]);\r\n  } else {\r\n    // 将 init.headers 断言为 Record<string, string>\r\n    const headers = init.headers as Record<string, string>;\r\n    headers[\"X-Host\"] = url.hostname; // 添加 X-Host 头\r\n  }\r\n\r\n  return fetch(endpoint, init); // 使用更新后的 init 进行 fetch\r\n}\r\n\r\nexport function getProxyURL(input: string) {\r\n  console.log(input)\r\n  if (input === \"\") return input;\r\n  const url = new URL(input);\r\n  url.searchParams.set('proxy_host', url.hostname); // 替换为实际的 proxy_host 值\r\n  url.hostname = END_POINT;\r\n  return url.toString();\r\n}","import React, { useEffect, useState } from 'react';\nimport { getProxyURL } from '@/Tools/Proxy/utils.ts';\nimport { Main } from '../App';\nimport Nav from '../Nav';\nimport { parseRootDomain } from '../Tools/shijima'\n\nconst GetProxyURL = () => {\n    const [url, setUrl] = useState(\"\");\n    const [proxyURL, setProxyURL] = useState(\"\");\n    const [proxyReferer, setProxyReferer] = useState(\"\"); // 新的状态来存储 proxy_referer 的值\n\n\n    useEffect(() => {\n        const httpsRegex = /https:\\/\\/[^\\s/$.?#].[^\\s]*/; // 提取URL的正则表达式\n        const updateURL = () => {\n            const match = url.match(httpsRegex);\n            let newProxyURL = getProxyURL(match ? match : \"\");\n\n            // 如果有 proxyReferer，则将其作为参数附加到 proxyURL 上\n            if (proxyReferer) {\n                const refererParam = encodeURIComponent(proxyReferer);\n                newProxyURL += (newProxyURL.includes('?') ? '&' : '?') + `proxy_referer=${refererParam}`;\n            }\n\n            setProxyURL(newProxyURL); // 提取并更新代理 URL\n        };\n\n        updateURL();\n\n        return;\n    }, [url, proxyReferer])\n\n    useEffect(() => {\n        try {\n            const parsedURL = new URL(url);\n\n            if (parseRootDomain(parsedURL.hostname) === 'sinaimg.cn') setProxyReferer(\"https://weibo.com/\")\n        } catch (e) {\n            console.log(e)\n        } finally {\n            \n        }\n    }, [url])\n\n    const handleDrop = (event) => {\n        event.preventDefault(); // 阻止默认行为\n        const data = event.dataTransfer.getData('text'); // 获取拖拽的数据\n        setUrl(data);\n    };\n\n    const handleDragOver = (event) => {\n        event.preventDefault(); // 阻止默认行为，以允许 drop 事件\n    };\n\n    const handleMouseEnter = (event) => {\n        // 在鼠标悬停时全选内容\n        event.target.select();\n    };\n\n    const handlePaste = (event) => {\n        event.preventDefault(); // 阻止默认粘贴行为 !important, 不加会paste两份..为啥去掉了.\n        // const clipboardData = event.clipboardData || window.clipboardData; // 这是啥。\n        const clipboardData = event.clipboardData;\n        const data = clipboardData.getData('Text'); // 获取剪贴板中的文本\n        setUrl(data);\n    };\n\n    // useEffect(() => {\n    //     // 添加粘贴事件监听器\n    //     window.addEventListener('paste', handlePaste);\n    //     return () => {\n    //         // 清理事件监听器\n    //         window.removeEventListener('paste', handlePaste);\n    //     };\n    // }, []);\n\n    return (\n        <Main><Nav />\n            <div className='h-full'\n                onDrop={handleDrop} // 绑定 drop 事件\n                onDragOver={handleDragOver} // 绑定 dragOver 事件\n            // onPaste={handlePaste}\n            >\n                <input\n                    type=\"text\"\n                    value={url}\n                    onChange={(e) => { setUrl(e.target.value) }} // 绑定输入框变化事件\n                    onMouseEnter={handleMouseEnter} // 绑定鼠标悬停事件\n                    placeholder=\"输入 URL, 或者直接按 Ctrl+V, 或者拖动连接到此页面\"\n                    style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\n                // onPaste={handlePaste}\n                // onPaste={()=>{}}\n                // readOnly\n                />\n                <input\n                    type=\"text\"\n                    value={proxyReferer}\n                    onChange={(e) => { setProxyReferer(e.target.value) }} // 绑定 proxy_referer 变化事件\n                    onMouseEnter={handleMouseEnter} // 绑定鼠标悬停事件\n                    placeholder=\"输入 referer URL\"\n                    style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\n                />\n                <input\n                    type=\"text\"\n                    value={proxyURL}\n                    onMouseEnter={handleMouseEnter} // 绑定鼠标悬停事件\n                    readOnly\n                    placeholder=\"GPT是我爹\"\n                    style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\n                />\n            </div>\n        </Main>\n    );\n};\n\nexport default GetProxyURL;","\n/**\n * 使用URL API解析主域名（需完整URL）\n * @param url 完整URL（如 \"https://abc.example.com/path\"）\n * @returns 主域名（如 \"example.com\"）\n */\nexport function parseRootDomain(hostname: string): string {\n    try {\n        const parts = hostname.split('.');\n        return parts.length > 2\n            ? parts.slice(-2).join('.')\n            : hostname;\n    } catch {\n        throw new Error(\"Invalid URL format\");\n    }\n}\n"],"names":["END_POINT","fetchWithProxy","input","init","url","URL","endpoint","pathname","search","fetch","headers","hostname","Headers","append","Array","isArray","push","getProxyURL","console","log","searchParams","set","toString","GetProxyURL","setUrl","useState","proxyURL","setProxyURL","proxyReferer","setProxyReferer","useEffect","httpsRegex","updateURL","match","newProxyURL","refererParam","encodeURIComponent","includes","parts","split","length","slice","join","Error","parseRootDomain","e","handleMouseEnter","event","target","select","_jsxs","Main","children","_jsx","Nav","className","onDrop","preventDefault","data","dataTransfer","getData","onDragOver","type","value","onChange","onMouseEnter","placeholder","style","width","padding","marginBottom","readOnly"],"sourceRoot":""}