{"version":3,"file":"static/js/734.20177b3b.chunk.js","mappings":"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","sources":["Tools/Proxy/utils.ts","bilicover/ImagePreview.js","bilicover/BV.js","bilicover/Live.js","bilicover/B23.js","bilicover/BiliCover.js"],"sourcesContent":["// 24-11-16：这个函数能够对准endpoint代理一个需要CORS的请求。这里是为了得到bilibili封面用的。\r\n// \"X-Host\",\r\n// \"X-Origin\",\r\n// \"X-Referer\",\r\n// 这些会替换那些不让传的，Host是这里设定的\r\nexport const END_POINT = \"proxy.moonchan.xyz\"\r\n// 目前访问的时候有挺多问题的\r\n// 比如host没有port，忘记后端哪边改了没有了\r\n\r\n\r\n\r\nexport function fetchWithProxy(\r\n  input: string | URL,\r\n  init?: RequestInit,\r\n): Promise<Response> {\r\n  const url = new URL(input);\r\n  const endpoint = \"https://\" + END_POINT + url.pathname + url.search\r\n\r\n  if (!init) {\r\n    return fetch(endpoint, {\r\n      headers: {\r\n        \"X-Host\": url.hostname,\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!init.headers) {\r\n    init.headers = {}; // 如果 init.headers 不存在，则初始化为空对象\r\n  }\r\n\r\n  // 这段代码不知道怎么debug，简化不了，就留在这里了\r\n\r\n  // 检查 init.headers 是否是 Headers 对象\r\n  if (init.headers instanceof Headers) {\r\n    init.headers.append(\"X-Host\", url.hostname); // 使用 append 方法添加头\r\n  } else if (Array.isArray(init.headers)) {\r\n    // 如果是一个数组类型，使用 push 添加新的头\r\n    init.headers.push([\"X-Host\", url.hostname]);\r\n  } else {\r\n    // 将 init.headers 断言为 Record<string, string>\r\n    const headers = init.headers as Record<string, string>;\r\n    headers[\"X-Host\"] = url.hostname; // 添加 X-Host 头\r\n  }\r\n\r\n  return fetch(endpoint, init); // 使用更新后的 init 进行 fetch\r\n}\r\n\r\nexport function getProxyURL(input: string) {\r\n  console.log(input)\r\n  if (input === \"\") return input;\r\n  const url = new URL(input);\r\n  url.searchParams.set('proxy_host', url.hostname); // 替换为实际的 proxy_host 值\r\n  url.hostname = END_POINT;\r\n  return url.toString();\r\n}","import React, { useState } from 'react';\n\nconst ImagePreview = ({ imageUrl, text }) => {\n    const [copyMessage, setCopyMessage] = useState(\"\");\n    // 新增状态：用于显示发送到月岛的操作消息\n    const [moonchanMessage, setMoonchanMessage] = useState(\"\");\n\n    const copyImageUrl = () => {\n        // 注意：这里保留了您原始代码中的 .replace(/^https:/, 'http:') 和 \"\\n\"\n        // 复制时将 https 替换为 http，并添加换行符\n        navigator.clipboard.writeText(imageUrl.replace(/^https:/, 'http:') + \"\\n\")\n            .then(() => {\n                setCopyMessage(\"图片地址已复制: \" + imageUrl.replace(/^https:/, 'http:'));\n                setTimeout(() => setCopyMessage(\"\"), 3000); // 3秒后清除消息\n            })\n            .catch(err => {\n                console.error(\"复制失败:\", err);\n                setCopyMessage(\"复制失败，请重试\");\n                setTimeout(() => setCopyMessage(\"\"), 3000); // 3秒后清除消息\n            });\n    };\n\n    const sendToMoonchan = async () => {\n        setMoonchanMessage(\"发送中...\"); // 显示加载状态\n\n        const url = \"https://moonchan.xyz/api/v2/?bid=104&tid=135803\";\n        const headers = {\n            \"Content-Type\": \"application/json\" // 指定请求体是 JSON 格式\n        };\n\n        // 将 imageUrl 和 text 作为 JSON 数据发送\n        const body = JSON.stringify({\n            p: imageUrl.replace(/^https:/, 'http:'), // 使用原始的 imageUrl prop\n            txt: text // 使用原始的 text prop\n        });\n\n        try {\n            const response = await fetch(url, {\n                method: \"POST\", // 使用 POST 方法\n                credentials: 'include',\n                headers: headers,\n                body: body\n            });\n\n            if (response.ok) {\n                // 请求成功\n                // 如果API有返回JSON数据，可以解析并使用：\n                // const data = await response.json();\n                setMoonchanMessage(\"发送成功！\");\n                setTimeout(() => setMoonchanMessage(\"\"), 3000);\n            } else {\n                // 请求失败，获取错误信息\n                const errorText = await response.text();\n                console.error(\"发送到月岛失败响应:\", response.status, response.statusText, errorText);\n                setMoonchanMessage(`发送失败: ${response.status} ${response.statusText} - ${errorText.substring(0, 100)}...`); // 截取部分错误信息展示\n                setTimeout(() => setMoonchanMessage(\"\"), 5000); // 错误消息显示时间稍长\n            }\n\n            fetch(\"https://moonchan.xyz/api/v2/random?table=bilicover\", {\n                method: \"POST\",\n                credentials: 'include',\n                headers: headers,\n                body: imageUrl.replace(/^https:/, 'http:'),\n            })\n        } catch (error) {\n            // 网络错误或fetch本身失败\n            console.error(\"发送到月岛时发生错误:\", error);\n            setMoonchanMessage(`发送失败: ${error.message}`);\n            setTimeout(() => setMoonchanMessage(\"\"), 5000);\n        }\n    };\n\n    return (\n        <div className=\"flex items-center space-x-4\">\n            <img\n                src={imageUrl}\n                alt=\"预览\"\n                className=\"w-1/2 h-auto\"\n                referrerPolicy=\"no-referrer\" // 注意：这里是 referrerpolicy，不是 referrerpolicy\n            />\n            {/* 调整布局，使按钮和消息垂直排列 */}\n            <div className=\"flex flex-col space-y-4\">\n                {/* 复制图片地址部分 */}\n                <div>\n                    <button\n                        onClick={copyImageUrl}\n                        className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n                    >\n                        复制图片地址\n                    </button>\n                    {copyMessage && (\n                        <p className=\"mt-2 text-green-500\">{copyMessage}</p>\n                    )}\n                </div>\n\n                {/* 发送到月岛部分 */}\n                <div>\n                    <button\n                        onClick={sendToMoonchan}\n                        className=\"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\"\n                    >\n                        发送到月岛\n                    </button>\n                    {moonchanMessage && (\n                        // 根据消息类型（成功/失败）显示不同颜色\n                        <p className={`mt-2 ${moonchanMessage.includes('失败') ? 'text-red-500' : 'text-green-500'}`}>\n                            {moonchanMessage}\n                        </p>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ImagePreview;","import React, { useState, useEffect } from 'react';\nimport { fetchWithProxy } from '@/Tools/Proxy/utils'\nimport ImagePreview from './ImagePreview';\n\nconst BV = ({ id, text }) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetchWithProxy(\n                    `https://apiv2.magecorn.com/bilicover/get?type=bv&id=${id}&client=2.6.0`, \n                    {\n                        method: 'GET',\n                    }\n                );\n                if (!response.ok) {\n                    throw new Error('Network response was not ok'+response.statusText.toString());\n                }\n                const jsonData = await response.json();\n\n                // 如果 jsonData 不存在或不包含 url 属性，抛出错误\n                if (!jsonData || !jsonData.url) {\n                    throw new Error(\"结果中未找到 'url' 属性\");\n                }\n\n                setData(jsonData.url);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [id]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        <ImagePreview imageUrl={data} text={text} />\n    );\n};\n\nexport default BV;","import React, { useState, useEffect } from 'react';\nimport { fetchWithProxy } from '@/Tools/Proxy/utils'\nimport ImagePreview from './ImagePreview';\n\nconst Live = ({ id, text }) => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetchWithProxy(\n                    `https://apiv2.magecorn.com/bilicover/get?type=live&id=${id}&client=2.6.0`, \n                    {\n                        method: 'GET',\n                    }\n                );\n                if (!response.ok) {\n                    throw new Error('Network response was not ok'+response.statusText.toString());\n                }\n                const jsonData = await response.json();\n\n                // 如果 jsonData 不存在或不包含 url 属性，抛出错误\n                if (!jsonData || !jsonData.url) {\n                    throw new Error(\"结果中未找到 'url' 属性\");\n                }\n\n                setData(jsonData.url);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [id]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        <ImagePreview imageUrl={data} text={text} />\n    );\n};\n\nexport default Live;","import React, { useState, useEffect } from 'react';\nimport { fetchWithProxy } from '@/Tools/Proxy/utils'\nimport BV from './BV';\nimport Live from './Live';\n\nconst B23 = ({ id, text }) => {\n    const [bv, setBV] = useState(null);\n    const [live, setLive] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetchWithProxy(\n                    `https://apiv2.magecorn.com/bilicover/get?type=b23&id=${id}&client=2.6.0`,\n                    {\n                        method: 'GET',\n                    }\n                );\n                if (!response.ok) {\n                    throw new Error('Network response was not ok' + response.statusText.toString());\n                }\n                const jsonData = await response.json();\n\n                // 如果 jsonData 不存在或不包含 result 属性，抛出错误\n                if (!jsonData || !jsonData.result) {\n                    throw new Error(\"结果中未找到 'result' 属性\");\n                }\n                const urlString = jsonData.result;\n\n                // 创建 URL 对象\n                const url = new URL(urlString);\n\n                // 获取 pathname\n                // const pathname = url.pathname; // 结果是 '/video/BV12s1mYcEJW'\n\n                // 提取 'video/' 之后的部分\n                const bv = url.pathname.split('/video/')[1]; // 结果是 'BV12s1mYcEJW'\n                const live = url.pathname.split('/')[1];\n\n                setBV(bv);\n                setLive(live);\n            } catch (err) {\n                setError(err.message);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, [id]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error: {error}</div>;\n    }\n\n    return (\n        bv ? <BV id={bv} text={text} /> : <Live id={live} text={text} />\n\n    );\n};\n\nexport default B23;","import React, { useEffect, useState } from 'react';\nimport B23 from \"./B23\";\nimport BV from \"./BV\";\nimport Live from './Live';\n\nimport { Main } from \"../App\"\nimport Nav from '../Nav';\n\nconst BiliCover = () => {\n    const [url, setUrl] = useState(\"\");\n    const [b23id, setB23id] = useState(\"\");\n    const [bvid, setBvid] = useState(\"\");\n    const [liveid, setLiveid] = useState(\"\");\n\n    const extractIds = (url) => {\n        const b23Regex = /https?:\\/\\/(?:www\\.)?b23\\.tv\\/(\\w+)/;\n        const bvidRegex = /https?:\\/\\/(?:www\\.)?bilibili\\.com\\/video\\/(\\w+)/;\n        const liveRegex = /https?:\\/\\/live\\.bilibili\\.com\\/(\\w+)/;\n\n        const b23Match = url.match(b23Regex);\n        const bvidMatch = url.match(bvidRegex);\n        const liveMatch = url.match(liveRegex);\n\n        setB23id(b23Match ? b23Match[1] : \"\");\n        setBvid(bvidMatch ? bvidMatch[1] : \"\");\n        setLiveid(liveMatch ? liveMatch[1] : \"\");\n    };\n\n    const handleChange = (e) => {\n        const newUrl = e.target.value; // 获取输入的 URL\n        setUrl(newUrl); // 更新输入框的 URL\n        extractIds(newUrl); // 提取 ID\n    };\n\n    const handlePaste = (event) => {\n        // 阻止默认事件\n        event.preventDefault();\n        // 获取剪贴板内容\n        const clipboardData = event.clipboardData || window.clipboardData;\n        const pastedData = clipboardData.getData('Text'); // 获取文本\n\n        setUrl(pastedData); // 更新输入框的 URL\n        extractIds(pastedData); // 提取 ID\n    };\n\n    const handleMouseEnter = (event) => {\n        // 在鼠标悬停时全选内容\n        event.target.select();\n    };\n\n    const handleDrop = (event) => {\n        event.preventDefault(); // 阻止默认行为\n        const data = event.dataTransfer.getData('text'); // 获取拖拽的数据\n        setUrl(data); // 将拖拽的内容设置到输入框中\n        extractIds(data); // 提取 ID\n    };\n\n    const handleDragOver = (event) => {\n        event.preventDefault(); // 阻止默认行为，以允许 drop 事件\n    };\n\n\n    useEffect(() => {\n        // 添加粘贴事件监听器\n        window.addEventListener('paste', handlePaste);\n\n        // 清理事件监听器\n        return () => {\n            window.removeEventListener('paste', handlePaste);\n        };\n    });\n\n    return (\n        <Main><Nav />\n            <div className='h-full'\n                onDrop={handleDrop} // 绑定 drop 事件\n                onDragOver={handleDragOver} // 绑定 dragOver 事件\n            >\n                <input\n                    type=\"text\"\n                    value={url}\n                    onChange={handleChange}\n                    onMouseEnter={handleMouseEnter} // 绑定鼠标悬停事件\n\n                    placeholder=\"输入 URL, 或者直接按 Ctrl+V, 或者拖动连接到此页面\"\n                    style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\n                />\n                {b23id && <B23 id={b23id} text={url} />}\n                {bvid && <BV id={bvid} text={url} />}\n                {liveid && <Live id={liveid} text={url} />}\n                <div>后端支持(无断):<a className=\"text-blue-500 hover:text-green-500 underline\" href=\"https://bilicover.magecorn.com/help\">https://bilicover.magecorn.com/help</a></div>\n            </div>\n        </Main>\n    );\n};\n\nexport default BiliCover;"],"names":["END_POINT","fetchWithProxy","input","init","url","URL","endpoint","pathname","search","fetch","headers","hostname","Headers","append","Array","isArray","push","getProxyURL","console","log","searchParams","set","toString","_ref","imageUrl","text","copyMessage","setCopyMessage","useState","moonchanMessage","setMoonchanMessage","_jsxs","className","children","_jsx","src","alt","referrerPolicy","onClick","copyImageUrl","navigator","clipboard","writeText","replace","then","setTimeout","catch","err","error","async","body","JSON","stringify","p","txt","response","method","credentials","ok","errorText","status","statusText","substring","message","includes","id","data","setData","loading","setLoading","setError","useEffect","Error","jsonData","json","fetchData","ImagePreview","bv","setBV","live","setLive","result","urlString","split","BV","Live","BiliCover","setUrl","b23id","setB23id","bvid","setBvid","liveid","setLiveid","extractIds","b23Match","match","bvidMatch","liveMatch","handlePaste","event","preventDefault","pastedData","clipboardData","window","getData","addEventListener","removeEventListener","Main","Nav","onDrop","dataTransfer","onDragOver","type","value","onChange","e","newUrl","target","onMouseEnter","select","placeholder","style","width","padding","marginBottom","B23","href"],"sourceRoot":""}