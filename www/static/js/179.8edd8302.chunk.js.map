{"version":3,"file":"static/js/179.8edd8302.chunk.js","mappings":"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","sources":["Tools/Proxy/utils.ts","Tools/Proxy/ProxyImage.tsx","Tools/CustomImage.tsx","blog/ContentRender.tsx","blog/BlogCard.tsx","blog/BlogCardLazy.jsx","blog/BlogPageLazy.js","blog/Blog.js"],"sourcesContent":["// 24-11-16：这个函数能够对准endpoint代理一个需要CORS的请求。这里是为了得到bilibili封面用的。\r\n// \"X-Host\",\r\n// \"X-Origin\",\r\n// \"X-Referer\",\r\n// 这些会替换那些不让传的，Host是这里设定的\r\nexport const END_POINT = \"proxy.moonchan.xyz\"\r\n// 目前访问的时候有挺多问题的\r\n// 比如host没有port，忘记后端哪边改了没有了\r\n\r\n\r\n\r\nexport function fetchWithProxy(\r\n  input: string | URL,\r\n  init?: RequestInit,\r\n): Promise<Response> {\r\n  const url = new URL(input);\r\n  const endpoint = \"https://\" + END_POINT + url.pathname + url.search\r\n\r\n  if (!init) {\r\n    return fetch(endpoint, {\r\n      headers: {\r\n        \"X-Host\": url.hostname,\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!init.headers) {\r\n    init.headers = {}; // 如果 init.headers 不存在，则初始化为空对象\r\n  }\r\n\r\n  // 这段代码不知道怎么debug，简化不了，就留在这里了\r\n\r\n  // 检查 init.headers 是否是 Headers 对象\r\n  if (init.headers instanceof Headers) {\r\n    init.headers.append(\"X-Host\", url.hostname); // 使用 append 方法添加头\r\n  } else if (Array.isArray(init.headers)) {\r\n    // 如果是一个数组类型，使用 push 添加新的头\r\n    init.headers.push([\"X-Host\", url.hostname]);\r\n  } else {\r\n    // 将 init.headers 断言为 Record<string, string>\r\n    const headers = init.headers as Record<string, string>;\r\n    headers[\"X-Host\"] = url.hostname; // 添加 X-Host 头\r\n  }\r\n\r\n  return fetch(endpoint, init); // 使用更新后的 init 进行 fetch\r\n}\r\n\r\nexport function getProxyURL(input: string) {\r\n  console.log(input)\r\n  if (input === \"\") return input;\r\n  const url = new URL(input);\r\n  url.searchParams.set('proxy_host', url.hostname); // 替换为实际的 proxy_host 值\r\n  url.hostname = END_POINT;\r\n  return url.toString();\r\n}","// 完全配合 utils.ts/Proxy 指定的代理\n// \n\nimport React, { forwardRef } from 'react';\nimport { END_POINT } from './utils';\n\ninterface CustomImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n    origin?: string;\n    referer?: string;\n}\n\nconst CustomImage = forwardRef<HTMLImageElement, CustomImageProps>((props, ref) => {\n\n    const url = new URL(props.src!)\n\n    // 添加或更新查询参数\n    url.searchParams.set('proxy_host', url.hostname); // 不包含端口，包含端口的是host   \n    url.hostname = END_POINT\n    if (props.origin) {\n        url.searchParams.set('proxy_origin', props.origin);   \n    }\n    if (props.referer) {\n        url.searchParams.set('proxy_referer', props.referer);   \n    }\n    // eslint-disable-next-line jsx-a11y/alt-text\n    return <img ref={ref} {...props} src={url.toString()} />;\n    // 为了消掉提示要这么做的，有什么大病吧。\n    // const alt = props.alt || \"\";\n    // return <img ref={ref} {...props} alt={alt}/>; // 为了消掉提示这么做的，有什么大病吧。\n});\n\nCustomImage.displayName = 'CustomImage'; // 可选：设置 displayName 以便于调试\n\nexport default CustomImage;","// 完全配合 utils.ts/Proxy\n\nimport React, { forwardRef } from 'react';\nimport ProxyImage from './Proxy/ProxyImage';\n\ninterface CustomImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n    alt: string; // alt 属性是必需的\n}\n\nconst CustomImage = forwardRef<HTMLImageElement, CustomImageProps>((props, ref) => {\n    const proxyList: string[] = [\n        \"https://img.youtube.com\",\n    ]\n\n    // for (const index in proxyList) {\n    //     console.log(props.src, index, props.src!.startsWith(proxyList[index]))\n\n    //     if (props.src!.startsWith(proxyList[index])) {\n    //         return <ProxyImage ref={ref} {...props}/>\n    //     }\n    // }\n    for (const prefix of proxyList) {\n        console.log(props.src, prefix, props.src!.startsWith(prefix))\n\n        if (props.src!.startsWith(prefix)) {\n            return <ProxyImage ref={ref} {...props}/>\n        }\n    }\n\n    // 如果是不需要ProxyImage代理的连接\n\n    const prefixMap: { [key: string]: string | undefined } = {\n        \"https://exhentai.org/s\": \"https://ehwv.moonchan.xyz/image/s\",\n        \"https://e-hentai.org/s\": \"https://ehwv.moonchan.xyz/image/s\",\n        \"https://ex.moonchan.xyz/s\": \"https://ehwv.moonchan.xyz/image/s\",\n        \"https://ehwv.moonchan.xyz/s\": \"https://ehwv.moonchan.xyz/image/s\",\n        \"https://ex.nmbyd1.top/s\": \"https://ehwv.moonchan.xyz/image/s\",\n        \"https://ex.nmbyd2.top/s\": \"https://ehwv.moonchan.xyz/image/s\"\n    };\n\n    let src = props.src\n\n    // 遍历对象的键\n    if (src) {\n        for (const prefix in prefixMap) {\n            if (src.startsWith(prefix)) {\n                // 替换前缀\n                src = src.replace(prefix, prefixMap[prefix]!);\n                break; // 找到第一个匹配后可以退出循环\n            }\n        }\n    }\n\n    // eslint-disable-next-line jsx-a11y/alt-text\n    return <img ref={ref} {...props} src={src} />;\n    // 为了消掉提示要这么做的，有什么大病吧。\n    // const alt = props.alt || \"\";\n    // return <img ref={ref} {...props} alt={alt}/>; // 为了消掉提示这么做的，有什么大病吧。\n});\n\nCustomImage.displayName = 'CustomImage'; // 可选：设置 displayName 以便于调试\n\nexport default CustomImage;","// ContentRender.tsx\nimport React from 'react';\nimport CustomImage from '../Tools/CustomImage'\n\ninterface ContentRenderProps {\n    content: string; // 定义 content 的类型\n}\n\nconst ContentRender: React.FC<ContentRenderProps> = ({ content }) => {\n    // 按行分割内容\n    const lines = content.split('\\n');\n\n    return (\n        <div>\n            {lines.map((line, index) => {\n                if (/^#+/.test(line)) {\n                    const match = /^(#+)\\s*(.*)$/.exec(line);\n                    if (match) {\n                        switch (match[1].length) {\n                            case 1:\n                                return <h1><ContentRender content={match[2]} /></h1>;\n                            case 2:\n                                return <h2><ContentRender content={match[2]} /></h2>;\n                            case 3:\n                                return <h3><ContentRender content={match[2]} /></h3>;\n                            case 4:\n                                return <h4><ContentRender content={match[2]} /></h4>;\n                            case 5:\n                                return <h5><ContentRender content={match[2]} /></h5>;\n                            default:\n                                return <h6><ContentRender content={match[2]} /></h6>;\n                        }\n                    }\n                }\n\n                if (/^\\[(.*)\\]\\((https?:\\/\\/[^\\s]+)\\)/.test(line)) {\n                    // 算了匹配两次就两次吧。\n                    const match = /\\[(.*)\\]\\((https?:\\/\\/[^\\s]+)\\)/.exec(line);\n                    if (match)\n                        return (\n                            <a href={match[2]!}\n                                className=\"text-blue-500 hover:text-green-500 underline\"\n                            >\n                                {match[1]!}\n                            </a>\n                        );\n                }\n\n\n                if (/^\\!\\[(.*)\\]\\((https?:\\/\\/[^\\s]+)\\)/.test(line)) {\n                    // 算了匹配两次就两次吧。\n                    const match = /^!\\[(.*)\\]\\((https?:\\/\\/[^\\s]+)\\)/.exec(line);\n                    if (match)\n                        return (\n                            <CustomImage\n                                key={index}\n                                src={match[2]!}\n                                alt={match[1]!} // 这里可以根据需要修改 alt 属性的内容\n                                referrerPolicy='no-referrer'\n                                className=\"mt-2 max-w-full h-auto\"\n                            />\n                        );\n                }\n\n                if (/^(https?:\\/\\/[^\\s]+)/.test(line)) {\n                    // 如果是 URL，则返回图像元素\n                    return (\n                        <CustomImage\n                            key={index}\n                            src={line}\n                            alt={line} // 这里可以根据需要修改 alt 属性的内容\n                            referrerPolicy='no-referrer'\n                            className=\"mt-2 max-w-full h-auto\"\n                        />\n                    );\n                }\n\n                // 如果是文本，则返回段落元素\n                return (\n                    <p key={index} className=\"text-gray-700\">\n                        {line}\n                    </p>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default ContentRender;","import { useState } from \"react\";\nimport ContentRender from \"./ContentRender\"\n\nexport interface Blog {\n    title?: string;\n    content: string;\n    tags?: string[];\n}\n\ninterface BlogCardProps {\n    blog: Blog; // 使用 Blog 类型注解\n}\n\nconst BlogCard: React.FC<BlogCardProps> = ({ blog }) => {\n    const LENGTH = 100;\n    const [isExpanded, setIsExpanded] = useState(blog.content.length <= LENGTH);\n\n    const toggleExpand = () => {\n        // setIsExpanded(!isExpanded);\n        setIsExpanded(true);\n    };\n\n    return (\n        <div\n            className={\n                `mb-4 p-4 border border-gray-300 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 ${blog.content.length > 100 && !isExpanded ? 'cursor-pointer': ''}`\n            }\n            onClick={toggleExpand}\n        >\n            {blog.title && <h2 className=\"text-xl font-semibold\">{blog.title}</h2>}\n            {blog.tags && blog.tags.length > 0 && (\n                <div className=\"mt-2 mb-2\">\n                    {blog.tags.map((tag, index) => (\n                        <span key={index} className=\"inline-block bg-blue-100 text-blue-800 text-xs font-semibold mr-2 px-2.5 py-0.5 rounded\">\n                            {tag}\n                        </span>\n                    ))}\n                </div>\n            )}\n            <div className=\"text-gray-700\">\n                {isExpanded ? <ContentRender content={blog.content} /> : `${blog.content.substring(0, 100)}${blog.content.length > 100? '...': ''}`}\n            </div>\n            {blog.content.length > 100 && !isExpanded && (\n                <button\n                    className=\"mt-2 text-blue-500 hover:underline\"\n                >\n                    {isExpanded ? \"收起\" : \"阅读全文\"}\n                </button>\n            )}\n        </div>\n    );\n};\n\nexport default BlogCard;","import { useEffect, useState } from \"react\"\nimport BlogCard from \"./BlogCard\"\nimport { fetchWithProxy } from \"../Tools/Proxy/utils\";\n\nconst BlogCardLazy = ({ title, url }) => {\n    const [tags, setTags] = useState([]);\n    const [content, setContents] = useState(\"loading\");\n\n    useEffect(()=>{\n        async function getResponse() {\n            const response = await fetchWithProxy(url, {\n                method: \"GET\",\n            });\n\n            const content = await response.text();\n\n            console.log(content)\n\n            setContents(content)\n        }\n\n        getResponse()\n    }, [])\n\n    if (content === 'loading') return <div>loading...</div>\n\n    return (<BlogCard blog={{title, content, tags}}></BlogCard>)\n}\n\nexport default BlogCardLazy;","import { useEffect, useState } from \"react\";\nimport BlogCardLazy from \"./BlogCardLazy\";\nimport { fetchWithProxy } from \"../Tools/Proxy/utils\";\n\nconst BlogPageLazy = ({ prefix, url }) => {\n    const [blogs, setBlogs] = useState([])\n    useEffect(() => {\n        async function getResponse() {\n            const response = await fetchWithProxy(url, {\n                method: \"GET\",\n                headers: {\n                    \"Cache-Control\": \"no-cache\",\n                }\n            })\n\n            const blogs = await response.json();\n\n            setBlogs(blogs)\n        }\n\n        getResponse()\n    }, [])\n\n    return (\n        <div className=\"p-4\">\n            {blogs.map((blog) => (\n                <BlogCardLazy\n                    key={blog.path}\n                    url={prefix + blog.path}\n                    title={blog.file_name}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default BlogPageLazy;","import { useEffect, useState } from \"react\";\nimport BlogPage from \"./BlogPageLazy\";\nimport { fetchWithProxy } from \"../Tools/Proxy/utils\";\n\nconst Blog = () => {\n    const URL = \"https://raw.githubusercontent.com/Hana-ame/Hana-ame/refs/heads/notes/main.json\"\n    const [main, setMain] = useState([])\n    const [cnt, setCnt] = useState(1)\n\n    useEffect(() => {\n        async function getResponse() {\n            const response = await fetchWithProxy(URL, {\n                method: \"GET\",\n                headers: {\n                    \"Cache-Control\": \"no-cache\",\n                }\n            })\n\n            const main = await response.json();\n\n            setMain(main)\n        }\n\n        getResponse()\n    }, [])\n\n    const handleShowNext = () => {\n        setCnt(prevCnt => prevCnt + 1); // 每次点击增加 1\n    };\n\n\n    return (\n        <div className=\"p-4 h-full overflow-y-scroll\">\n            {main && main.files?.slice(0, cnt).map((path) => (\n                <BlogPage\n                    key={path}\n                    prefix={main.prefix}\n                    url={main.prefix + path}\n                />\n            ))}\n            {main && main.files?.length > cnt && ( // 如果还有更多文件\n                <button\n                    onClick={handleShowNext}\n                    className=\"mt-4 w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition\"\n                >\n                    显示下一页\n                </button>\n            )}\n\n        </div>\n    );\n};\n\nexport default Blog;"],"names":["END_POINT","fetchWithProxy","input","init","url","URL","endpoint","pathname","search","fetch","headers","hostname","Headers","append","Array","isArray","push","getProxyURL","console","log","searchParams","set","toString","CustomImage","forwardRef","props","ref","src","origin","referer","_jsx","displayName","proxyList","prefix","startsWith","ProxyImage","prefixMap","replace","ContentRender","_ref","content","lines","split","children","map","line","index","test","match","exec","length","href","className","alt","referrerPolicy","blog","isExpanded","setIsExpanded","useState","_jsxs","onClick","toggleExpand","title","tags","tag","substring","setTags","setContents","useEffect","async","response","method","text","getResponse","BlogCard","blogs","setBlogs","json","BlogCardLazy","path","file_name","Blog","_main$files","_main$files2","main","setMain","cnt","setCnt","files","slice","BlogPage","handleShowNext","prevCnt"],"sourceRoot":""}